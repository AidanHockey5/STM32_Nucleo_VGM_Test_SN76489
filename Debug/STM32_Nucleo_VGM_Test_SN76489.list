
STM32_Nucleo_VGM_Test_SN76489.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000364c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003850  08003850  00013850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003858  08003858  00013858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000047f0  20000000  08003860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000066c  200047f0  08008050  000247f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004e5c  08008050  00024e5c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000247f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ae09  00000000  00000000  00024820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000038ed  00000000  00000000  0003f629  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007373  00000000  00000000  00042f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000bc0  00000000  00000000  0004a290  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e38  00000000  00000000  0004ae50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006d0f  00000000  00000000  0004bc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004848  00000000  00000000  00052997  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000571df  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000206c  00000000  00000000  0005725c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200047f0 	.word	0x200047f0
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080037c8 	.word	0x080037c8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200047f4 	.word	0x200047f4
 80001d0:	080037c8 	.word	0x080037c8

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000312:	f1a4 0401 	sub.w	r4, r4, #1
 8000316:	d1e9      	bne.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f092 0f00 	teq	r2, #0
 80004be:	bf14      	ite	ne
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	e720      	b.n	8000318 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aedc 	beq.w	80002c6 <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6c1      	b.n	80002c6 <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_d2uiz>:
 8000968:	004a      	lsls	r2, r1, #1
 800096a:	d211      	bcs.n	8000990 <__aeabi_d2uiz+0x28>
 800096c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000970:	d211      	bcs.n	8000996 <__aeabi_d2uiz+0x2e>
 8000972:	d50d      	bpl.n	8000990 <__aeabi_d2uiz+0x28>
 8000974:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000978:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800097c:	d40e      	bmi.n	800099c <__aeabi_d2uiz+0x34>
 800097e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000986:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	4770      	bx	lr
 8000990:	f04f 0000 	mov.w	r0, #0
 8000994:	4770      	bx	lr
 8000996:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099a:	d102      	bne.n	80009a2 <__aeabi_d2uiz+0x3a>
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	4770      	bx	lr
 80009a2:	f04f 0000 	mov.w	r0, #0
 80009a6:	4770      	bx	lr

080009a8 <__aeabi_uldivmod>:
 80009a8:	b953      	cbnz	r3, 80009c0 <__aeabi_uldivmod+0x18>
 80009aa:	b94a      	cbnz	r2, 80009c0 <__aeabi_uldivmod+0x18>
 80009ac:	2900      	cmp	r1, #0
 80009ae:	bf08      	it	eq
 80009b0:	2800      	cmpeq	r0, #0
 80009b2:	bf1c      	itt	ne
 80009b4:	f04f 31ff 	movne.w	r1, #4294967295
 80009b8:	f04f 30ff 	movne.w	r0, #4294967295
 80009bc:	f000 b97a 	b.w	8000cb4 <__aeabi_idiv0>
 80009c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c8:	f000 f806 	bl	80009d8 <__udivmoddi4>
 80009cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d4:	b004      	add	sp, #16
 80009d6:	4770      	bx	lr

080009d8 <__udivmoddi4>:
 80009d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009dc:	468c      	mov	ip, r1
 80009de:	460d      	mov	r5, r1
 80009e0:	4604      	mov	r4, r0
 80009e2:	9e08      	ldr	r6, [sp, #32]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d151      	bne.n	8000a8c <__udivmoddi4+0xb4>
 80009e8:	428a      	cmp	r2, r1
 80009ea:	4617      	mov	r7, r2
 80009ec:	d96d      	bls.n	8000aca <__udivmoddi4+0xf2>
 80009ee:	fab2 fe82 	clz	lr, r2
 80009f2:	f1be 0f00 	cmp.w	lr, #0
 80009f6:	d00b      	beq.n	8000a10 <__udivmoddi4+0x38>
 80009f8:	f1ce 0c20 	rsb	ip, lr, #32
 80009fc:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a00:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a04:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a08:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a0c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a10:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a14:	0c25      	lsrs	r5, r4, #16
 8000a16:	fbbc f8fa 	udiv	r8, ip, sl
 8000a1a:	fa1f f987 	uxth.w	r9, r7
 8000a1e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a22:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a26:	fb08 f309 	mul.w	r3, r8, r9
 8000a2a:	42ab      	cmp	r3, r5
 8000a2c:	d90a      	bls.n	8000a44 <__udivmoddi4+0x6c>
 8000a2e:	19ed      	adds	r5, r5, r7
 8000a30:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a34:	f080 8123 	bcs.w	8000c7e <__udivmoddi4+0x2a6>
 8000a38:	42ab      	cmp	r3, r5
 8000a3a:	f240 8120 	bls.w	8000c7e <__udivmoddi4+0x2a6>
 8000a3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a42:	443d      	add	r5, r7
 8000a44:	1aed      	subs	r5, r5, r3
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a4c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a54:	fb00 f909 	mul.w	r9, r0, r9
 8000a58:	45a1      	cmp	r9, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x98>
 8000a5c:	19e4      	adds	r4, r4, r7
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 810a 	bcs.w	8000c7a <__udivmoddi4+0x2a2>
 8000a66:	45a1      	cmp	r9, r4
 8000a68:	f240 8107 	bls.w	8000c7a <__udivmoddi4+0x2a2>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	443c      	add	r4, r7
 8000a70:	eba4 0409 	sub.w	r4, r4, r9
 8000a74:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d061      	beq.n	8000b42 <__udivmoddi4+0x16a>
 8000a7e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000a82:	2300      	movs	r3, #0
 8000a84:	6034      	str	r4, [r6, #0]
 8000a86:	6073      	str	r3, [r6, #4]
 8000a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8c:	428b      	cmp	r3, r1
 8000a8e:	d907      	bls.n	8000aa0 <__udivmoddi4+0xc8>
 8000a90:	2e00      	cmp	r6, #0
 8000a92:	d054      	beq.n	8000b3e <__udivmoddi4+0x166>
 8000a94:	2100      	movs	r1, #0
 8000a96:	e886 0021 	stmia.w	r6, {r0, r5}
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa0:	fab3 f183 	clz	r1, r3
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	f040 808e 	bne.w	8000bc6 <__udivmoddi4+0x1ee>
 8000aaa:	42ab      	cmp	r3, r5
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xdc>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 80fa 	bhi.w	8000ca8 <__udivmoddi4+0x2d0>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb65 0503 	sbc.w	r5, r5, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	46ac      	mov	ip, r5
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d03f      	beq.n	8000b42 <__udivmoddi4+0x16a>
 8000ac2:	e886 1010 	stmia.w	r6, {r4, ip}
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	b912      	cbnz	r2, 8000ad2 <__udivmoddi4+0xfa>
 8000acc:	2701      	movs	r7, #1
 8000ace:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ad2:	fab7 fe87 	clz	lr, r7
 8000ad6:	f1be 0f00 	cmp.w	lr, #0
 8000ada:	d134      	bne.n	8000b46 <__udivmoddi4+0x16e>
 8000adc:	1beb      	subs	r3, r5, r7
 8000ade:	0c3a      	lsrs	r2, r7, #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	fbb3 f8f2 	udiv	r8, r3, r2
 8000aea:	0c25      	lsrs	r5, r4, #16
 8000aec:	fb02 3318 	mls	r3, r2, r8, r3
 8000af0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000af4:	fb0c f308 	mul.w	r3, ip, r8
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	d907      	bls.n	8000b0c <__udivmoddi4+0x134>
 8000afc:	19ed      	adds	r5, r5, r7
 8000afe:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b02:	d202      	bcs.n	8000b0a <__udivmoddi4+0x132>
 8000b04:	42ab      	cmp	r3, r5
 8000b06:	f200 80d1 	bhi.w	8000cac <__udivmoddi4+0x2d4>
 8000b0a:	4680      	mov	r8, r0
 8000b0c:	1aed      	subs	r5, r5, r3
 8000b0e:	b2a3      	uxth	r3, r4
 8000b10:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b14:	fb02 5510 	mls	r5, r2, r0, r5
 8000b18:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b1c:	fb0c fc00 	mul.w	ip, ip, r0
 8000b20:	45a4      	cmp	ip, r4
 8000b22:	d907      	bls.n	8000b34 <__udivmoddi4+0x15c>
 8000b24:	19e4      	adds	r4, r4, r7
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	d202      	bcs.n	8000b32 <__udivmoddi4+0x15a>
 8000b2c:	45a4      	cmp	ip, r4
 8000b2e:	f200 80b8 	bhi.w	8000ca2 <__udivmoddi4+0x2ca>
 8000b32:	4618      	mov	r0, r3
 8000b34:	eba4 040c 	sub.w	r4, r4, ip
 8000b38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b3c:	e79d      	b.n	8000a7a <__udivmoddi4+0xa2>
 8000b3e:	4631      	mov	r1, r6
 8000b40:	4630      	mov	r0, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	f1ce 0420 	rsb	r4, lr, #32
 8000b4a:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b4e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b52:	fa20 f804 	lsr.w	r8, r0, r4
 8000b56:	0c3a      	lsrs	r2, r7, #16
 8000b58:	fa25 f404 	lsr.w	r4, r5, r4
 8000b5c:	ea48 0803 	orr.w	r8, r8, r3
 8000b60:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b64:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b68:	fb02 4411 	mls	r4, r2, r1, r4
 8000b6c:	fa1f fc87 	uxth.w	ip, r7
 8000b70:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000b74:	fb01 f30c 	mul.w	r3, r1, ip
 8000b78:	42ab      	cmp	r3, r5
 8000b7a:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x1bc>
 8000b80:	19ed      	adds	r5, r5, r7
 8000b82:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b86:	f080 808a 	bcs.w	8000c9e <__udivmoddi4+0x2c6>
 8000b8a:	42ab      	cmp	r3, r5
 8000b8c:	f240 8087 	bls.w	8000c9e <__udivmoddi4+0x2c6>
 8000b90:	3902      	subs	r1, #2
 8000b92:	443d      	add	r5, r7
 8000b94:	1aeb      	subs	r3, r5, r3
 8000b96:	fa1f f588 	uxth.w	r5, r8
 8000b9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8000b9e:	fb02 3310 	mls	r3, r2, r0, r3
 8000ba2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ba6:	fb00 f30c 	mul.w	r3, r0, ip
 8000baa:	42ab      	cmp	r3, r5
 8000bac:	d907      	bls.n	8000bbe <__udivmoddi4+0x1e6>
 8000bae:	19ed      	adds	r5, r5, r7
 8000bb0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bb4:	d26f      	bcs.n	8000c96 <__udivmoddi4+0x2be>
 8000bb6:	42ab      	cmp	r3, r5
 8000bb8:	d96d      	bls.n	8000c96 <__udivmoddi4+0x2be>
 8000bba:	3802      	subs	r0, #2
 8000bbc:	443d      	add	r5, r7
 8000bbe:	1aeb      	subs	r3, r5, r3
 8000bc0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc4:	e78f      	b.n	8000ae6 <__udivmoddi4+0x10e>
 8000bc6:	f1c1 0720 	rsb	r7, r1, #32
 8000bca:	fa22 f807 	lsr.w	r8, r2, r7
 8000bce:	408b      	lsls	r3, r1
 8000bd0:	fa05 f401 	lsl.w	r4, r5, r1
 8000bd4:	ea48 0303 	orr.w	r3, r8, r3
 8000bd8:	fa20 fe07 	lsr.w	lr, r0, r7
 8000bdc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000be0:	40fd      	lsrs	r5, r7
 8000be2:	ea4e 0e04 	orr.w	lr, lr, r4
 8000be6:	fbb5 f9fc 	udiv	r9, r5, ip
 8000bea:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000bee:	fb0c 5519 	mls	r5, ip, r9, r5
 8000bf2:	fa1f f883 	uxth.w	r8, r3
 8000bf6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000bfa:	fb09 f408 	mul.w	r4, r9, r8
 8000bfe:	42ac      	cmp	r4, r5
 8000c00:	fa02 f201 	lsl.w	r2, r2, r1
 8000c04:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x244>
 8000c0a:	18ed      	adds	r5, r5, r3
 8000c0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c10:	d243      	bcs.n	8000c9a <__udivmoddi4+0x2c2>
 8000c12:	42ac      	cmp	r4, r5
 8000c14:	d941      	bls.n	8000c9a <__udivmoddi4+0x2c2>
 8000c16:	f1a9 0902 	sub.w	r9, r9, #2
 8000c1a:	441d      	add	r5, r3
 8000c1c:	1b2d      	subs	r5, r5, r4
 8000c1e:	fa1f fe8e 	uxth.w	lr, lr
 8000c22:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c26:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c2a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c2e:	fb00 f808 	mul.w	r8, r0, r8
 8000c32:	45a0      	cmp	r8, r4
 8000c34:	d907      	bls.n	8000c46 <__udivmoddi4+0x26e>
 8000c36:	18e4      	adds	r4, r4, r3
 8000c38:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c3c:	d229      	bcs.n	8000c92 <__udivmoddi4+0x2ba>
 8000c3e:	45a0      	cmp	r8, r4
 8000c40:	d927      	bls.n	8000c92 <__udivmoddi4+0x2ba>
 8000c42:	3802      	subs	r0, #2
 8000c44:	441c      	add	r4, r3
 8000c46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c4a:	eba4 0408 	sub.w	r4, r4, r8
 8000c4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c52:	454c      	cmp	r4, r9
 8000c54:	46c6      	mov	lr, r8
 8000c56:	464d      	mov	r5, r9
 8000c58:	d315      	bcc.n	8000c86 <__udivmoddi4+0x2ae>
 8000c5a:	d012      	beq.n	8000c82 <__udivmoddi4+0x2aa>
 8000c5c:	b156      	cbz	r6, 8000c74 <__udivmoddi4+0x29c>
 8000c5e:	ebba 030e 	subs.w	r3, sl, lr
 8000c62:	eb64 0405 	sbc.w	r4, r4, r5
 8000c66:	fa04 f707 	lsl.w	r7, r4, r7
 8000c6a:	40cb      	lsrs	r3, r1
 8000c6c:	431f      	orrs	r7, r3
 8000c6e:	40cc      	lsrs	r4, r1
 8000c70:	6037      	str	r7, [r6, #0]
 8000c72:	6074      	str	r4, [r6, #4]
 8000c74:	2100      	movs	r1, #0
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	e6f8      	b.n	8000a70 <__udivmoddi4+0x98>
 8000c7e:	4690      	mov	r8, r2
 8000c80:	e6e0      	b.n	8000a44 <__udivmoddi4+0x6c>
 8000c82:	45c2      	cmp	sl, r8
 8000c84:	d2ea      	bcs.n	8000c5c <__udivmoddi4+0x284>
 8000c86:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c8a:	eb69 0503 	sbc.w	r5, r9, r3
 8000c8e:	3801      	subs	r0, #1
 8000c90:	e7e4      	b.n	8000c5c <__udivmoddi4+0x284>
 8000c92:	4628      	mov	r0, r5
 8000c94:	e7d7      	b.n	8000c46 <__udivmoddi4+0x26e>
 8000c96:	4640      	mov	r0, r8
 8000c98:	e791      	b.n	8000bbe <__udivmoddi4+0x1e6>
 8000c9a:	4681      	mov	r9, r0
 8000c9c:	e7be      	b.n	8000c1c <__udivmoddi4+0x244>
 8000c9e:	4601      	mov	r1, r0
 8000ca0:	e778      	b.n	8000b94 <__udivmoddi4+0x1bc>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	e745      	b.n	8000b34 <__udivmoddi4+0x15c>
 8000ca8:	4608      	mov	r0, r1
 8000caa:	e708      	b.n	8000abe <__udivmoddi4+0xe6>
 8000cac:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb0:	443d      	add	r5, r7
 8000cb2:	e72b      	b.n	8000b0c <__udivmoddi4+0x134>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_InitTick+0x24>)
{
 8000cbc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cc8:	f000 f862 	bl	8000d90 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4621      	mov	r1, r4
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f000 f828 	bl	8000d28 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000cd8:	2000      	movs	r0, #0
 8000cda:	bd10      	pop	{r4, pc}
 8000cdc:	200047ec 	.word	0x200047ec

08000ce0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_Init+0x20>)
{
 8000ce2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	6813      	ldr	r3, [r2, #0]
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cea:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f809 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff ffe0 	bl	8000cb8 <HAL_InitTick>
  HAL_MspInit();
 8000cf8:	f002 fbd8 	bl	80034ac <HAL_MspInit>
}
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	bd08      	pop	{r3, pc}
 8000d00:	40022000 	.word	0x40022000

08000d04 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d06:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d0c:	041b      	lsls	r3, r3, #16
 8000d0e:	0c1b      	lsrs	r3, r3, #16
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d14:	0200      	lsls	r0, r0, #8
 8000d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000d1e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d20:	60d3      	str	r3, [r2, #12]
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2a:	b530      	push	{r4, r5, lr}
 8000d2c:	68dc      	ldr	r4, [r3, #12]
 8000d2e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d32:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	bf28      	it	cs
 8000d3c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 0501 	mov.w	r5, #1
 8000d44:	fa05 f303 	lsl.w	r3, r5, r3
 8000d48:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4c:	bf8c      	ite	hi
 8000d4e:	3c03      	subhi	r4, #3
 8000d50:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d52:	4019      	ands	r1, r3
 8000d54:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d56:	fa05 f404 	lsl.w	r4, r5, r4
 8000d5a:	3c01      	subs	r4, #1
 8000d5c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000d5e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	ea42 0201 	orr.w	r2, r2, r1
 8000d64:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	bfaf      	iteee	ge
 8000d6a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	f000 000f 	andlt.w	r0, r0, #15
 8000d72:	4b06      	ldrlt	r3, [pc, #24]	; (8000d8c <HAL_NVIC_SetPriority+0x64>)
 8000d74:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	bfa5      	ittet	ge
 8000d78:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000d7c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000d84:	bd30      	pop	{r4, r5, pc}
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00
 8000d8c:	e000ed14 	.word	0xe000ed14

08000d90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	3801      	subs	r0, #1
 8000d92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d96:	d20a      	bcs.n	8000dae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	21f0      	movs	r1, #240	; 0xf0
 8000da0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000dae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000dbe:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000dc0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000dc2:	bf0c      	ite	eq
 8000dc4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000dc8:	f022 0204 	bicne.w	r2, r2, #4
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	4770      	bx	lr
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000dd4:	4770      	bx	lr

08000dd6 <HAL_SYSTICK_IRQHandler>:
{
 8000dd6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000dd8:	f7ff fffc 	bl	8000dd4 <HAL_SYSTICK_Callback>
 8000ddc:	bd08      	pop	{r3, pc}

08000dde <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dde:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000de0:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8000de4:	2c01      	cmp	r4, #1
 8000de6:	d038      	beq.n	8000e5a <HAL_DMA_Start_IT+0x7c>

  if(HAL_DMA_STATE_READY == hdma->State)
 8000de8:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8000dec:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000dee:	b2ed      	uxtb	r5, r5
 8000df0:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8000df2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8000df6:	f04f 0600 	mov.w	r6, #0
 8000dfa:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8000dfe:	d12a      	bne.n	8000e56 <HAL_DMA_Start_IT+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e00:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e04:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e06:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000e08:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000e0a:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000e0c:	f026 0601 	bic.w	r6, r6, #1
 8000e10:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000e12:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8000e14:	f006 061c 	and.w	r6, r6, #28
 8000e18:	40b5      	lsls	r5, r6
 8000e1a:	607d      	str	r5, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e1c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e1e:	6883      	ldr	r3, [r0, #8]
 8000e20:	6805      	ldr	r5, [r0, #0]
 8000e22:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8000e24:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e26:	bf0b      	itete	eq
 8000e28:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000e2a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000e2c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000e2e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000e30:	b14b      	cbz	r3, 8000e46 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e32:	6823      	ldr	r3, [r4, #0]
 8000e34:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e38:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000e3a:	682b      	ldr	r3, [r5, #0]
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e42:	2000      	movs	r0, #0
 8000e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	f023 0304 	bic.w	r3, r3, #4
 8000e4c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e4e:	6823      	ldr	r3, [r4, #0]
 8000e50:	f043 030a 	orr.w	r3, r3, #10
 8000e54:	e7f0      	b.n	8000e38 <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);
 8000e56:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8000e5a:	2002      	movs	r0, #2
}
 8000e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e64:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e68:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8000fe0 <HAL_GPIO_Init+0x180>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e6c:	4a5a      	ldr	r2, [pc, #360]	; (8000fd8 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00;
 8000e6e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e70:	fa38 f403 	lsrs.w	r4, r8, r3
 8000e74:	d102      	bne.n	8000e7c <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000e76:	b003      	add	sp, #12
 8000e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e7c:	2401      	movs	r4, #1
 8000e7e:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000e82:	ea18 050a 	ands.w	r5, r8, sl
 8000e86:	f000 809c 	beq.w	8000fc2 <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8a:	684c      	ldr	r4, [r1, #4]
 8000e8c:	f024 0b10 	bic.w	fp, r4, #16
 8000e90:	f1bb 0f02 	cmp.w	fp, #2
 8000e94:	d114      	bne.n	8000ec0 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000e96:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000e9a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e9e:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000ea2:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ea6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000eaa:	270f      	movs	r7, #15
 8000eac:	fa07 f70c 	lsl.w	r7, r7, ip
 8000eb0:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000eb4:	690e      	ldr	r6, [r1, #16]
 8000eb6:	fa06 f60c 	lsl.w	r6, r6, ip
 8000eba:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8000ebc:	f8ce 6020 	str.w	r6, [lr, #32]
 8000ec0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000ec4:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000ec6:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000ec8:	fa07 f70c 	lsl.w	r7, r7, ip
 8000ecc:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ece:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000ed2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ed4:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed8:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000edc:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee0:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000ee4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee6:	d811      	bhi.n	8000f0c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8000ee8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000eea:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8000eee:	68ce      	ldr	r6, [r1, #12]
 8000ef0:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000ef4:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000ef8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000efa:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000efc:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f00:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000f04:	409e      	lsls	r6, r3
 8000f06:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000f0a:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f0c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000f0e:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f10:	688e      	ldr	r6, [r1, #8]
 8000f12:	fa06 f60c 	lsl.w	r6, r6, ip
 8000f16:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f18:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000f1a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f1c:	d551      	bpl.n	8000fc2 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8000f22:	f046 0601 	orr.w	r6, r6, #1
 8000f26:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8000f2a:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8000f2e:	f023 0703 	bic.w	r7, r3, #3
 8000f32:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f36:	f006 0601 	and.w	r6, r6, #1
 8000f3a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000f3e:	9601      	str	r6, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f40:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f44:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000f46:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f48:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f4c:	f04f 0e0f 	mov.w	lr, #15
 8000f50:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000f54:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f58:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000f5c:	d033      	beq.n	8000fc6 <HAL_GPIO_Init+0x166>
 8000f5e:	4e1f      	ldr	r6, [pc, #124]	; (8000fdc <HAL_GPIO_Init+0x17c>)
 8000f60:	42b0      	cmp	r0, r6
 8000f62:	d032      	beq.n	8000fca <HAL_GPIO_Init+0x16a>
 8000f64:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f68:	42b0      	cmp	r0, r6
 8000f6a:	d030      	beq.n	8000fce <HAL_GPIO_Init+0x16e>
 8000f6c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f70:	42b0      	cmp	r0, r6
 8000f72:	d02e      	beq.n	8000fd2 <HAL_GPIO_Init+0x172>
 8000f74:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f78:	42b0      	cmp	r0, r6
 8000f7a:	bf14      	ite	ne
 8000f7c:	2607      	movne	r6, #7
 8000f7e:	2604      	moveq	r6, #4
 8000f80:	fa06 f60c 	lsl.w	r6, r6, ip
 8000f84:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f88:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000f8a:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f92:	bf0c      	ite	eq
 8000f94:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000f96:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000f98:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8000f9a:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f9c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	bf0c      	ite	eq
 8000fa2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000fa4:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000fa6:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8000fa8:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000faa:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000fae:	bf0c      	ite	eq
 8000fb0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000fb2:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000fb4:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8000fb6:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000fba:	bf54      	ite	pl
 8000fbc:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000fbe:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000fc0:	60d6      	str	r6, [r2, #12]
    position++;
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	e754      	b.n	8000e70 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000fc6:	2600      	movs	r6, #0
 8000fc8:	e7da      	b.n	8000f80 <HAL_GPIO_Init+0x120>
 8000fca:	2601      	movs	r6, #1
 8000fcc:	e7d8      	b.n	8000f80 <HAL_GPIO_Init+0x120>
 8000fce:	2602      	movs	r6, #2
 8000fd0:	e7d6      	b.n	8000f80 <HAL_GPIO_Init+0x120>
 8000fd2:	2603      	movs	r6, #3
 8000fd4:	e7d4      	b.n	8000f80 <HAL_GPIO_Init+0x120>
 8000fd6:	bf00      	nop
 8000fd8:	40010400 	.word	0x40010400
 8000fdc:	48000400 	.word	0x48000400
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe4:	b10a      	cbz	r2, 8000fea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fe6:	6181      	str	r1, [r0, #24]
 8000fe8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fea:	6281      	str	r1, [r0, #40]	; 0x28
 8000fec:	4770      	bx	lr
	...

08000ff0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ff0:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <HAL_PWREx_GetVoltageRange+0xc>)
 8000ff2:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8000ff4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40007000 	.word	0x40007000

08001000 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001002:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001004:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001008:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800100c:	d11a      	bne.n	8001044 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800100e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001012:	d013      	beq.n	800103c <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001014:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001016:	4912      	ldr	r1, [pc, #72]	; (8001060 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001018:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800101c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001020:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001024:	6812      	ldr	r2, [r2, #0]
 8001026:	fbb2 f1f1 	udiv	r1, r2, r1
 800102a:	2232      	movs	r2, #50	; 0x32
 800102c:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800102e:	b112      	cbz	r2, 8001036 <HAL_PWREx_ControlVoltageScaling+0x36>
 8001030:	6959      	ldr	r1, [r3, #20]
 8001032:	0549      	lsls	r1, r1, #21
 8001034:	d404      	bmi.n	8001040 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	055b      	lsls	r3, r3, #21
 800103a:	d40d      	bmi.n	8001058 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 800103c:	2000      	movs	r0, #0
 800103e:	4770      	bx	lr
        wait_loop_index--;
 8001040:	3a01      	subs	r2, #1
 8001042:	e7f4      	b.n	800102e <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001044:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001048:	bf1f      	itttt	ne
 800104a:	681a      	ldrne	r2, [r3, #0]
 800104c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001050:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001054:	601a      	strne	r2, [r3, #0]
 8001056:	e7f1      	b.n	800103c <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8001058:	2003      	movs	r0, #3
}  
 800105a:	4770      	bx	lr
 800105c:	40007000 	.word	0x40007000
 8001060:	000f4240 	.word	0x000f4240
 8001064:	200047ec 	.word	0x200047ec

08001068 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001068:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800106a:	4d1e      	ldr	r5, [pc, #120]	; (80010e4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800106c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800106e:	00da      	lsls	r2, r3, #3
{
 8001070:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001072:	d518      	bpl.n	80010a6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001074:	f7ff ffbc 	bl	8000ff0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001078:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800107c:	d123      	bne.n	80010c6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800107e:	2c80      	cmp	r4, #128	; 0x80
 8001080:	d929      	bls.n	80010d6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001082:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001084:	bf8c      	ite	hi
 8001086:	2002      	movhi	r0, #2
 8001088:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800108a:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800108c:	6813      	ldr	r3, [r2, #0]
 800108e:	f023 0307 	bic.w	r3, r3, #7
 8001092:	4303      	orrs	r3, r0
 8001094:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001096:	6813      	ldr	r3, [r2, #0]
 8001098:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800109c:	1a18      	subs	r0, r3, r0
 800109e:	bf18      	it	ne
 80010a0:	2001      	movne	r0, #1
 80010a2:	b003      	add	sp, #12
 80010a4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	65ab      	str	r3, [r5, #88]	; 0x58
 80010ae:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80010b8:	f7ff ff9a 	bl	8000ff0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80010bc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80010be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010c2:	65ab      	str	r3, [r5, #88]	; 0x58
 80010c4:	e7d8      	b.n	8001078 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80010c6:	2c80      	cmp	r4, #128	; 0x80
 80010c8:	d807      	bhi.n	80010da <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80010ca:	d008      	beq.n	80010de <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80010cc:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80010d0:	4258      	negs	r0, r3
 80010d2:	4158      	adcs	r0, r3
 80010d4:	e7d9      	b.n	800108a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80010d6:	2000      	movs	r0, #0
 80010d8:	e7d7      	b.n	800108a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80010da:	2003      	movs	r0, #3
 80010dc:	e7d5      	b.n	800108a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80010de:	2002      	movs	r0, #2
 80010e0:	e7d3      	b.n	800108a <RCC_SetFlashLatencyFromMSIRange+0x22>
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40022000 	.word	0x40022000

080010ec <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <HAL_RCC_GetSysClockFreq+0xc0>)
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	f012 0f0c 	tst.w	r2, #12
{
 80010f4:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80010f6:	d009      	beq.n	800110c <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80010fe:	2a0c      	cmp	r2, #12
 8001100:	d12d      	bne.n	800115e <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	f002 0203 	and.w	r2, r2, #3
 8001108:	2a01      	cmp	r2, #1
 800110a:	d128      	bne.n	800115e <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 800110c:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800110e:	4928      	ldr	r1, [pc, #160]	; (80011b0 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001110:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001112:	bf55      	itete	pl
 8001114:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001118:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800111a:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800111e:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8001122:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001126:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8001128:	f011 0f0c 	tst.w	r1, #12
 800112c:	bf0c      	ite	eq
 800112e:	4610      	moveq	r0, r2
 8001130:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001132:	6899      	ldr	r1, [r3, #8]
 8001134:	f001 010c 	and.w	r1, r1, #12
 8001138:	290c      	cmp	r1, #12
 800113a:	d130      	bne.n	800119e <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800113c:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800113e:	68d8      	ldr	r0, [r3, #12]
 8001140:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001144:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001146:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 800114a:	2802      	cmp	r0, #2
 800114c:	d019      	beq.n	8001182 <HAL_RCC_GetSysClockFreq+0x96>
 800114e:	2803      	cmp	r0, #3
 8001150:	d026      	beq.n	80011a0 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001152:	fbb2 f2f1 	udiv	r2, r2, r1
 8001156:	68d8      	ldr	r0, [r3, #12]
 8001158:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800115c:	e017      	b.n	800118e <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	f002 020c 	and.w	r2, r2, #12
 8001164:	2a04      	cmp	r2, #4
 8001166:	d007      	beq.n	8001178 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	f002 020c 	and.w	r2, r2, #12
 800116e:	2a08      	cmp	r2, #8
 8001170:	d104      	bne.n	800117c <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8001172:	4810      	ldr	r0, [pc, #64]	; (80011b4 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001174:	2200      	movs	r2, #0
 8001176:	e7dc      	b.n	8001132 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8001178:	480f      	ldr	r0, [pc, #60]	; (80011b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800117a:	e7fb      	b.n	8001174 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 800117c:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800117e:	4602      	mov	r2, r0
 8001180:	e7d7      	b.n	8001132 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001186:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800118a:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001194:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001196:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001198:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800119a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800119e:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	4804      	ldr	r0, [pc, #16]	; (80011b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80011a4:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80011a8:	e7ef      	b.n	800118a <HAL_RCC_GetSysClockFreq+0x9e>
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	08003820 	.word	0x08003820
 80011b4:	007a1200 	.word	0x007a1200
 80011b8:	00f42400 	.word	0x00f42400

080011bc <HAL_RCC_OscConfig>:
{
 80011bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(RCC_OscInitStruct == NULL)
 80011c0:	4605      	mov	r5, r0
 80011c2:	b908      	cbnz	r0, 80011c8 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 80011c4:	2001      	movs	r0, #1
 80011c6:	e08d      	b.n	80012e4 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011c8:	6803      	ldr	r3, [r0, #0]
 80011ca:	06d8      	lsls	r0, r3, #27
 80011cc:	d538      	bpl.n	8001240 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80011ce:	4cab      	ldr	r4, [pc, #684]	; (800147c <HAL_RCC_OscConfig+0x2c0>)
 80011d0:	68a3      	ldr	r3, [r4, #8]
 80011d2:	f013 0f0c 	tst.w	r3, #12
 80011d6:	d161      	bne.n	800129c <HAL_RCC_OscConfig+0xe0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	0799      	lsls	r1, r3, #30
 80011dc:	d502      	bpl.n	80011e4 <HAL_RCC_OscConfig+0x28>
 80011de:	69ab      	ldr	r3, [r5, #24]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0ef      	beq.n	80011c4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011e4:	6823      	ldr	r3, [r4, #0]
 80011e6:	6a28      	ldr	r0, [r5, #32]
 80011e8:	071a      	lsls	r2, r3, #28
 80011ea:	bf56      	itet	pl
 80011ec:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80011f0:	6823      	ldrmi	r3, [r4, #0]
 80011f2:	091b      	lsrpl	r3, r3, #4
 80011f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011f8:	4283      	cmp	r3, r0
 80011fa:	d23a      	bcs.n	8001272 <HAL_RCC_OscConfig+0xb6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011fc:	f7ff ff34 	bl	8001068 <RCC_SetFlashLatencyFromMSIRange>
 8001200:	2800      	cmp	r0, #0
 8001202:	d1df      	bne.n	80011c4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	f043 0308 	orr.w	r3, r3, #8
 800120a:	6023      	str	r3, [r4, #0]
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	6a2a      	ldr	r2, [r5, #32]
 8001210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001214:	4313      	orrs	r3, r2
 8001216:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001218:	6863      	ldr	r3, [r4, #4]
 800121a:	69ea      	ldr	r2, [r5, #28]
 800121c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001220:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001224:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001226:	f7ff ff61 	bl	80010ec <HAL_RCC_GetSysClockFreq>
 800122a:	68a3      	ldr	r3, [r4, #8]
 800122c:	4a94      	ldr	r2, [pc, #592]	; (8001480 <HAL_RCC_OscConfig+0x2c4>)
 800122e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001232:	5cd3      	ldrb	r3, [r2, r3]
 8001234:	40d8      	lsrs	r0, r3
 8001236:	4b93      	ldr	r3, [pc, #588]	; (8001484 <HAL_RCC_OscConfig+0x2c8>)
 8001238:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff fd3c 	bl	8000cb8 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001240:	682b      	ldr	r3, [r5, #0]
 8001242:	07d8      	lsls	r0, r3, #31
 8001244:	d461      	bmi.n	800130a <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001246:	682b      	ldr	r3, [r5, #0]
 8001248:	0799      	lsls	r1, r3, #30
 800124a:	f100 80a9 	bmi.w	80013a0 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124e:	682b      	ldr	r3, [r5, #0]
 8001250:	071a      	lsls	r2, r3, #28
 8001252:	f100 80e7 	bmi.w	8001424 <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001256:	682b      	ldr	r3, [r5, #0]
 8001258:	075b      	lsls	r3, r3, #29
 800125a:	f100 8115 	bmi.w	8001488 <HAL_RCC_OscConfig+0x2cc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800125e:	682b      	ldr	r3, [r5, #0]
 8001260:	069a      	lsls	r2, r3, #26
 8001262:	f100 817c 	bmi.w	800155e <HAL_RCC_OscConfig+0x3a2>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001266:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001268:	2a00      	cmp	r2, #0
 800126a:	f040 81a3 	bne.w	80015b4 <HAL_RCC_OscConfig+0x3f8>
  return HAL_OK;
 800126e:	2000      	movs	r0, #0
 8001270:	e038      	b.n	80012e4 <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001272:	6823      	ldr	r3, [r4, #0]
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	6023      	str	r3, [r4, #0]
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001280:	4303      	orrs	r3, r0
 8001282:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001284:	6863      	ldr	r3, [r4, #4]
 8001286:	69ea      	ldr	r2, [r5, #28]
 8001288:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800128c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001290:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001292:	f7ff fee9 	bl	8001068 <RCC_SetFlashLatencyFromMSIRange>
 8001296:	2800      	cmp	r0, #0
 8001298:	d0c5      	beq.n	8001226 <HAL_RCC_OscConfig+0x6a>
 800129a:	e793      	b.n	80011c4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800129c:	69ab      	ldr	r3, [r5, #24]
 800129e:	b323      	cbz	r3, 80012ea <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012a8:	f002 fa3a 	bl	8003720 <HAL_GetTick>
 80012ac:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	079b      	lsls	r3, r3, #30
 80012b2:	d511      	bpl.n	80012d8 <HAL_RCC_OscConfig+0x11c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6023      	str	r3, [r4, #0]
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	6a2a      	ldr	r2, [r5, #32]
 80012c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012c4:	4313      	orrs	r3, r2
 80012c6:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c8:	6863      	ldr	r3, [r4, #4]
 80012ca:	69ea      	ldr	r2, [r5, #28]
 80012cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80012d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012d4:	6063      	str	r3, [r4, #4]
 80012d6:	e7b3      	b.n	8001240 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012d8:	f002 fa22 	bl	8003720 <HAL_GetTick>
 80012dc:	1b80      	subs	r0, r0, r6
 80012de:	2802      	cmp	r0, #2
 80012e0:	d9e5      	bls.n	80012ae <HAL_RCC_OscConfig+0xf2>
            return HAL_TIMEOUT;
 80012e2:	2003      	movs	r0, #3
}
 80012e4:	b002      	add	sp, #8
 80012e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012f2:	f002 fa15 	bl	8003720 <HAL_GetTick>
 80012f6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	079f      	lsls	r7, r3, #30
 80012fc:	d5a0      	bpl.n	8001240 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012fe:	f002 fa0f 	bl	8003720 <HAL_GetTick>
 8001302:	1b80      	subs	r0, r0, r6
 8001304:	2802      	cmp	r0, #2
 8001306:	d9f7      	bls.n	80012f8 <HAL_RCC_OscConfig+0x13c>
 8001308:	e7eb      	b.n	80012e2 <HAL_RCC_OscConfig+0x126>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 800130a:	4c5c      	ldr	r4, [pc, #368]	; (800147c <HAL_RCC_OscConfig+0x2c0>)
 800130c:	68a3      	ldr	r3, [r4, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b08      	cmp	r3, #8
 8001314:	d009      	beq.n	800132a <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001316:	68a3      	ldr	r3, [r4, #8]
 8001318:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 800131c:	2b0c      	cmp	r3, #12
 800131e:	d10b      	bne.n	8001338 <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001320:	68e3      	ldr	r3, [r4, #12]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b03      	cmp	r3, #3
 8001328:	d106      	bne.n	8001338 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	039a      	lsls	r2, r3, #14
 800132e:	d58a      	bpl.n	8001246 <HAL_RCC_OscConfig+0x8a>
 8001330:	686b      	ldr	r3, [r5, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d187      	bne.n	8001246 <HAL_RCC_OscConfig+0x8a>
 8001336:	e745      	b.n	80011c4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001338:	686b      	ldr	r3, [r5, #4]
 800133a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800133e:	d110      	bne.n	8001362 <HAL_RCC_OscConfig+0x1a6>
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001346:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001348:	f002 f9ea 	bl	8003720 <HAL_GetTick>
 800134c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800134e:	6823      	ldr	r3, [r4, #0]
 8001350:	039b      	lsls	r3, r3, #14
 8001352:	f53f af78 	bmi.w	8001246 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001356:	f002 f9e3 	bl	8003720 <HAL_GetTick>
 800135a:	1b80      	subs	r0, r0, r6
 800135c:	2864      	cmp	r0, #100	; 0x64
 800135e:	d9f6      	bls.n	800134e <HAL_RCC_OscConfig+0x192>
 8001360:	e7bf      	b.n	80012e2 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001362:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001366:	d104      	bne.n	8001372 <HAL_RCC_OscConfig+0x1b6>
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800136e:	6023      	str	r3, [r4, #0]
 8001370:	e7e6      	b.n	8001340 <HAL_RCC_OscConfig+0x184>
 8001372:	6822      	ldr	r2, [r4, #0]
 8001374:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001378:	6022      	str	r2, [r4, #0]
 800137a:	6822      	ldr	r2, [r4, #0]
 800137c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001380:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1e0      	bne.n	8001348 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8001386:	f002 f9cb 	bl	8003720 <HAL_GetTick>
 800138a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800138c:	6823      	ldr	r3, [r4, #0]
 800138e:	039f      	lsls	r7, r3, #14
 8001390:	f57f af59 	bpl.w	8001246 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001394:	f002 f9c4 	bl	8003720 <HAL_GetTick>
 8001398:	1b80      	subs	r0, r0, r6
 800139a:	2864      	cmp	r0, #100	; 0x64
 800139c:	d9f6      	bls.n	800138c <HAL_RCC_OscConfig+0x1d0>
 800139e:	e7a0      	b.n	80012e2 <HAL_RCC_OscConfig+0x126>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80013a0:	4c36      	ldr	r4, [pc, #216]	; (800147c <HAL_RCC_OscConfig+0x2c0>)
 80013a2:	68a3      	ldr	r3, [r4, #8]
 80013a4:	f003 030c 	and.w	r3, r3, #12
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d009      	beq.n	80013c0 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013ac:	68a3      	ldr	r3, [r4, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	d113      	bne.n	80013de <HAL_RCC_OscConfig+0x222>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013b6:	68e3      	ldr	r3, [r4, #12]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d10e      	bne.n	80013de <HAL_RCC_OscConfig+0x222>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	055e      	lsls	r6, r3, #21
 80013c4:	d503      	bpl.n	80013ce <HAL_RCC_OscConfig+0x212>
 80013c6:	68eb      	ldr	r3, [r5, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f43f aefb 	beq.w	80011c4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ce:	6863      	ldr	r3, [r4, #4]
 80013d0:	692a      	ldr	r2, [r5, #16]
 80013d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80013d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013da:	6063      	str	r3, [r4, #4]
 80013dc:	e737      	b.n	800124e <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013de:	68eb      	ldr	r3, [r5, #12]
 80013e0:	b17b      	cbz	r3, 8001402 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_HSI_ENABLE();
 80013e2:	6823      	ldr	r3, [r4, #0]
 80013e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013ea:	f002 f999 	bl	8003720 <HAL_GetTick>
 80013ee:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	0558      	lsls	r0, r3, #21
 80013f4:	d4eb      	bmi.n	80013ce <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f6:	f002 f993 	bl	8003720 <HAL_GetTick>
 80013fa:	1b80      	subs	r0, r0, r6
 80013fc:	2802      	cmp	r0, #2
 80013fe:	d9f7      	bls.n	80013f0 <HAL_RCC_OscConfig+0x234>
 8001400:	e76f      	b.n	80012e2 <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_HSI_DISABLE();
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001408:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800140a:	f002 f989 	bl	8003720 <HAL_GetTick>
 800140e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001410:	6823      	ldr	r3, [r4, #0]
 8001412:	0559      	lsls	r1, r3, #21
 8001414:	f57f af1b 	bpl.w	800124e <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001418:	f002 f982 	bl	8003720 <HAL_GetTick>
 800141c:	1b80      	subs	r0, r0, r6
 800141e:	2802      	cmp	r0, #2
 8001420:	d9f6      	bls.n	8001410 <HAL_RCC_OscConfig+0x254>
 8001422:	e75e      	b.n	80012e2 <HAL_RCC_OscConfig+0x126>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001424:	696b      	ldr	r3, [r5, #20]
 8001426:	4c15      	ldr	r4, [pc, #84]	; (800147c <HAL_RCC_OscConfig+0x2c0>)
 8001428:	b19b      	cbz	r3, 8001452 <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 800142a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001436:	f002 f973 	bl	8003720 <HAL_GetTick>
 800143a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800143c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001440:	079f      	lsls	r7, r3, #30
 8001442:	f53f af08 	bmi.w	8001256 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001446:	f002 f96b 	bl	8003720 <HAL_GetTick>
 800144a:	1b80      	subs	r0, r0, r6
 800144c:	2802      	cmp	r0, #2
 800144e:	d9f5      	bls.n	800143c <HAL_RCC_OscConfig+0x280>
 8001450:	e747      	b.n	80012e2 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_LSI_DISABLE();
 8001452:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800145e:	f002 f95f 	bl	8003720 <HAL_GetTick>
 8001462:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001464:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001468:	0798      	lsls	r0, r3, #30
 800146a:	f57f aef4 	bpl.w	8001256 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146e:	f002 f957 	bl	8003720 <HAL_GetTick>
 8001472:	1b80      	subs	r0, r0, r6
 8001474:	2802      	cmp	r0, #2
 8001476:	d9f5      	bls.n	8001464 <HAL_RCC_OscConfig+0x2a8>
 8001478:	e733      	b.n	80012e2 <HAL_RCC_OscConfig+0x126>
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000
 8001480:	08003808 	.word	0x08003808
 8001484:	200047ec 	.word	0x200047ec
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001488:	4c79      	ldr	r4, [pc, #484]	; (8001670 <HAL_RCC_OscConfig+0x4b4>)
 800148a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800148c:	00d9      	lsls	r1, r3, #3
 800148e:	d427      	bmi.n	80014e0 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001490:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001496:	65a3      	str	r3, [r4, #88]	; 0x58
 8001498:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014a2:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a4:	4e73      	ldr	r6, [pc, #460]	; (8001674 <HAL_RCC_OscConfig+0x4b8>)
 80014a6:	6833      	ldr	r3, [r6, #0]
 80014a8:	05da      	lsls	r2, r3, #23
 80014aa:	d51b      	bpl.n	80014e4 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ac:	68ab      	ldr	r3, [r5, #8]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d129      	bne.n	8001506 <HAL_RCC_OscConfig+0x34a>
 80014b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80014be:	f002 f92f 	bl	8003720 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80014c6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80014c8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80014cc:	0798      	lsls	r0, r3, #30
 80014ce:	d540      	bpl.n	8001552 <HAL_RCC_OscConfig+0x396>
    if(pwrclkchanged == SET)
 80014d0:	2f00      	cmp	r7, #0
 80014d2:	f43f aec4 	beq.w	800125e <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80014de:	e6be      	b.n	800125e <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 80014e0:	2700      	movs	r7, #0
 80014e2:	e7df      	b.n	80014a4 <HAL_RCC_OscConfig+0x2e8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014e4:	6833      	ldr	r3, [r6, #0]
 80014e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ea:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80014ec:	f002 f918 	bl	8003720 <HAL_GetTick>
 80014f0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f2:	6833      	ldr	r3, [r6, #0]
 80014f4:	05db      	lsls	r3, r3, #23
 80014f6:	d4d9      	bmi.n	80014ac <HAL_RCC_OscConfig+0x2f0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f8:	f002 f912 	bl	8003720 <HAL_GetTick>
 80014fc:	eba0 0008 	sub.w	r0, r0, r8
 8001500:	2802      	cmp	r0, #2
 8001502:	d9f6      	bls.n	80014f2 <HAL_RCC_OscConfig+0x336>
 8001504:	e6ed      	b.n	80012e2 <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001506:	2b05      	cmp	r3, #5
 8001508:	d106      	bne.n	8001518 <HAL_RCC_OscConfig+0x35c>
 800150a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001516:	e7cc      	b.n	80014b2 <HAL_RCC_OscConfig+0x2f6>
 8001518:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800151c:	f022 0201 	bic.w	r2, r2, #1
 8001520:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001524:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001528:	f022 0204 	bic.w	r2, r2, #4
 800152c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1c4      	bne.n	80014be <HAL_RCC_OscConfig+0x302>
      tickstart = HAL_GetTick();
 8001534:	f002 f8f4 	bl	8003720 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001538:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800153c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800153e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001542:	0799      	lsls	r1, r3, #30
 8001544:	d5c4      	bpl.n	80014d0 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001546:	f002 f8eb 	bl	8003720 <HAL_GetTick>
 800154a:	1b80      	subs	r0, r0, r6
 800154c:	4540      	cmp	r0, r8
 800154e:	d9f6      	bls.n	800153e <HAL_RCC_OscConfig+0x382>
 8001550:	e6c7      	b.n	80012e2 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001552:	f002 f8e5 	bl	8003720 <HAL_GetTick>
 8001556:	1b80      	subs	r0, r0, r6
 8001558:	4540      	cmp	r0, r8
 800155a:	d9b5      	bls.n	80014c8 <HAL_RCC_OscConfig+0x30c>
 800155c:	e6c1      	b.n	80012e2 <HAL_RCC_OscConfig+0x126>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800155e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001560:	4c43      	ldr	r4, [pc, #268]	; (8001670 <HAL_RCC_OscConfig+0x4b4>)
 8001562:	b19b      	cbz	r3, 800158c <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSI48_ENABLE();
 8001564:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001570:	f002 f8d6 	bl	8003720 <HAL_GetTick>
 8001574:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001576:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800157a:	079b      	lsls	r3, r3, #30
 800157c:	f53f ae73 	bmi.w	8001266 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001580:	f002 f8ce 	bl	8003720 <HAL_GetTick>
 8001584:	1b80      	subs	r0, r0, r6
 8001586:	2802      	cmp	r0, #2
 8001588:	d9f5      	bls.n	8001576 <HAL_RCC_OscConfig+0x3ba>
 800158a:	e6aa      	b.n	80012e2 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSI48_DISABLE();
 800158c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001598:	f002 f8c2 	bl	8003720 <HAL_GetTick>
 800159c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 800159e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80015a2:	079f      	lsls	r7, r3, #30
 80015a4:	f57f ae5f 	bpl.w	8001266 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015a8:	f002 f8ba 	bl	8003720 <HAL_GetTick>
 80015ac:	1b80      	subs	r0, r0, r6
 80015ae:	2802      	cmp	r0, #2
 80015b0:	d9f5      	bls.n	800159e <HAL_RCC_OscConfig+0x3e2>
 80015b2:	e696      	b.n	80012e2 <HAL_RCC_OscConfig+0x126>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015b4:	4c2e      	ldr	r4, [pc, #184]	; (8001670 <HAL_RCC_OscConfig+0x4b4>)
 80015b6:	68a3      	ldr	r3, [r4, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b0c      	cmp	r3, #12
 80015be:	f43f ae01 	beq.w	80011c4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80015c2:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015c4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80015c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ca:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015cc:	d136      	bne.n	800163c <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 80015ce:	f002 f8a7 	bl	8003720 <HAL_GetTick>
 80015d2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	0198      	lsls	r0, r3, #6
 80015d8:	d42a      	bmi.n	8001630 <HAL_RCC_OscConfig+0x474>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015da:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80015dc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015de:	06db      	lsls	r3, r3, #27
 80015e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015e4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80015e6:	4313      	orrs	r3, r2
 80015e8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80015ea:	3a01      	subs	r2, #1
 80015ec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80015f0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80015f2:	0852      	lsrs	r2, r2, #1
 80015f4:	3a01      	subs	r2, #1
 80015f6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80015fa:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80015fc:	0852      	lsrs	r2, r2, #1
 80015fe:	3a01      	subs	r2, #1
 8001600:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001604:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800160c:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800160e:	68e3      	ldr	r3, [r4, #12]
 8001610:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001614:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001616:	f002 f883 	bl	8003720 <HAL_GetTick>
 800161a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	0199      	lsls	r1, r3, #6
 8001620:	f53f ae25 	bmi.w	800126e <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001624:	f002 f87c 	bl	8003720 <HAL_GetTick>
 8001628:	1b40      	subs	r0, r0, r5
 800162a:	2802      	cmp	r0, #2
 800162c:	d9f6      	bls.n	800161c <HAL_RCC_OscConfig+0x460>
 800162e:	e658      	b.n	80012e2 <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001630:	f002 f876 	bl	8003720 <HAL_GetTick>
 8001634:	1b80      	subs	r0, r0, r6
 8001636:	2802      	cmp	r0, #2
 8001638:	d9cc      	bls.n	80015d4 <HAL_RCC_OscConfig+0x418>
 800163a:	e652      	b.n	80012e2 <HAL_RCC_OscConfig+0x126>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001640:	bf5e      	ittt	pl
 8001642:	68e3      	ldrpl	r3, [r4, #12]
 8001644:	f023 0303 	bicpl.w	r3, r3, #3
 8001648:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800164a:	68e3      	ldr	r3, [r4, #12]
 800164c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001654:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001656:	f002 f863 	bl	8003720 <HAL_GetTick>
 800165a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	019b      	lsls	r3, r3, #6
 8001660:	f57f ae05 	bpl.w	800126e <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001664:	f002 f85c 	bl	8003720 <HAL_GetTick>
 8001668:	1b40      	subs	r0, r0, r5
 800166a:	2802      	cmp	r0, #2
 800166c:	d9f6      	bls.n	800165c <HAL_RCC_OscConfig+0x4a0>
 800166e:	e638      	b.n	80012e2 <HAL_RCC_OscConfig+0x126>
 8001670:	40021000 	.word	0x40021000
 8001674:	40007000 	.word	0x40007000

08001678 <HAL_RCC_ClockConfig>:
{
 8001678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800167c:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800167e:	4604      	mov	r4, r0
 8001680:	b910      	cbnz	r0, 8001688 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001682:	2001      	movs	r0, #1
 8001684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001688:	4a40      	ldr	r2, [pc, #256]	; (800178c <HAL_RCC_ClockConfig+0x114>)
 800168a:	6813      	ldr	r3, [r2, #0]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	428b      	cmp	r3, r1
 8001692:	d328      	bcc.n	80016e6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	07d9      	lsls	r1, r3, #31
 8001698:	d430      	bmi.n	80016fc <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169a:	6821      	ldr	r1, [r4, #0]
 800169c:	078a      	lsls	r2, r1, #30
 800169e:	d45a      	bmi.n	8001756 <HAL_RCC_ClockConfig+0xde>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016a0:	4a3a      	ldr	r2, [pc, #232]	; (800178c <HAL_RCC_ClockConfig+0x114>)
 80016a2:	6813      	ldr	r3, [r2, #0]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	429e      	cmp	r6, r3
 80016aa:	d35c      	bcc.n	8001766 <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ac:	f011 0f04 	tst.w	r1, #4
 80016b0:	4d37      	ldr	r5, [pc, #220]	; (8001790 <HAL_RCC_ClockConfig+0x118>)
 80016b2:	d163      	bne.n	800177c <HAL_RCC_ClockConfig+0x104>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b4:	070b      	lsls	r3, r1, #28
 80016b6:	d506      	bpl.n	80016c6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016b8:	68ab      	ldr	r3, [r5, #8]
 80016ba:	6922      	ldr	r2, [r4, #16]
 80016bc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80016c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80016c4:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016c6:	f7ff fd11 	bl	80010ec <HAL_RCC_GetSysClockFreq>
 80016ca:	68ab      	ldr	r3, [r5, #8]
 80016cc:	4a31      	ldr	r2, [pc, #196]	; (8001794 <HAL_RCC_ClockConfig+0x11c>)
 80016ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016d2:	5cd3      	ldrb	r3, [r2, r3]
 80016d4:	40d8      	lsrs	r0, r3
 80016d6:	4b30      	ldr	r3, [pc, #192]	; (8001798 <HAL_RCC_ClockConfig+0x120>)
 80016d8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff faec 	bl	8000cb8 <HAL_InitTick>
  return HAL_OK;
 80016e0:	2000      	movs	r0, #0
 80016e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	6813      	ldr	r3, [r2, #0]
 80016e8:	f023 0307 	bic.w	r3, r3, #7
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f0:	6813      	ldr	r3, [r2, #0]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	4299      	cmp	r1, r3
 80016f8:	d1c3      	bne.n	8001682 <HAL_RCC_ClockConfig+0xa>
 80016fa:	e7cb      	b.n	8001694 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016fc:	6862      	ldr	r2, [r4, #4]
 80016fe:	4d24      	ldr	r5, [pc, #144]	; (8001790 <HAL_RCC_ClockConfig+0x118>)
 8001700:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001702:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001704:	d11b      	bne.n	800173e <HAL_RCC_ClockConfig+0xc6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001706:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800170a:	d0ba      	beq.n	8001682 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800170c:	68ab      	ldr	r3, [r5, #8]
 800170e:	f023 0303 	bic.w	r3, r3, #3
 8001712:	4313      	orrs	r3, r2
 8001714:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001716:	f002 f803 	bl	8003720 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800171a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800171e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001720:	68ab      	ldr	r3, [r5, #8]
 8001722:	6862      	ldr	r2, [r4, #4]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800172c:	d0b5      	beq.n	800169a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172e:	f001 fff7 	bl	8003720 <HAL_GetTick>
 8001732:	1bc0      	subs	r0, r0, r7
 8001734:	4540      	cmp	r0, r8
 8001736:	d9f3      	bls.n	8001720 <HAL_RCC_ClockConfig+0xa8>
        return HAL_TIMEOUT;
 8001738:	2003      	movs	r0, #3
}
 800173a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173e:	2a02      	cmp	r2, #2
 8001740:	d102      	bne.n	8001748 <HAL_RCC_ClockConfig+0xd0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001742:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001746:	e7e0      	b.n	800170a <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001748:	b912      	cbnz	r2, 8001750 <HAL_RCC_ClockConfig+0xd8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800174a:	f013 0f02 	tst.w	r3, #2
 800174e:	e7dc      	b.n	800170a <HAL_RCC_ClockConfig+0x92>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001750:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001754:	e7d9      	b.n	800170a <HAL_RCC_ClockConfig+0x92>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001756:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <HAL_RCC_ClockConfig+0x118>)
 8001758:	68a0      	ldr	r0, [r4, #8]
 800175a:	6893      	ldr	r3, [r2, #8]
 800175c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001760:	4303      	orrs	r3, r0
 8001762:	6093      	str	r3, [r2, #8]
 8001764:	e79c      	b.n	80016a0 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	6813      	ldr	r3, [r2, #0]
 8001768:	f023 0307 	bic.w	r3, r3, #7
 800176c:	4333      	orrs	r3, r6
 800176e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001770:	6813      	ldr	r3, [r2, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	429e      	cmp	r6, r3
 8001778:	d183      	bne.n	8001682 <HAL_RCC_ClockConfig+0xa>
 800177a:	e797      	b.n	80016ac <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800177c:	68ab      	ldr	r3, [r5, #8]
 800177e:	68e2      	ldr	r2, [r4, #12]
 8001780:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001784:	4313      	orrs	r3, r2
 8001786:	60ab      	str	r3, [r5, #8]
 8001788:	e794      	b.n	80016b4 <HAL_RCC_ClockConfig+0x3c>
 800178a:	bf00      	nop
 800178c:	40022000 	.word	0x40022000
 8001790:	40021000 	.word	0x40021000
 8001794:	08003808 	.word	0x08003808
 8001798:	200047ec 	.word	0x200047ec

0800179c <HAL_RCC_GetHCLKFreq>:
}
 800179c:	4b01      	ldr	r3, [pc, #4]	; (80017a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	200047ec 	.word	0x200047ec

080017a8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <HAL_RCC_GetPCLK1Freq+0x14>)
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	4a03      	ldr	r2, [pc, #12]	; (80017c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017b6:	6810      	ldr	r0, [r2, #0]
}
 80017b8:	40d8      	lsrs	r0, r3
 80017ba:	4770      	bx	lr
 80017bc:	40021000 	.word	0x40021000
 80017c0:	08003818 	.word	0x08003818
 80017c4:	200047ec 	.word	0x200047ec

080017c8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <HAL_RCC_GetPCLK2Freq+0x14>)
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80017d2:	5cd3      	ldrb	r3, [r2, r3]
 80017d4:	4a03      	ldr	r2, [pc, #12]	; (80017e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80017d6:	6810      	ldr	r0, [r2, #0]
}
 80017d8:	40d8      	lsrs	r0, r3
 80017da:	4770      	bx	lr
 80017dc:	40021000 	.word	0x40021000
 80017e0:	08003818 	.word	0x08003818
 80017e4:	200047ec 	.word	0x200047ec

080017e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80017e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <RCCEx_PLLSAI1_Config+0x114>)
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	f012 0f03 	tst.w	r2, #3
{
 80017f2:	4605      	mov	r5, r0
 80017f4:	460e      	mov	r6, r1
 80017f6:	461c      	mov	r4, r3
 80017f8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80017fa:	d039      	beq.n	8001870 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	f002 0203 	and.w	r2, r2, #3
 8001802:	4282      	cmp	r2, r0
 8001804:	d14b      	bne.n	800189e <RCCEx_PLLSAI1_Config+0xb6>
       ||
 8001806:	2a00      	cmp	r2, #0
 8001808:	d049      	beq.n	800189e <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800180a:	68db      	ldr	r3, [r3, #12]
       ||
 800180c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800180e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001812:	3301      	adds	r3, #1
       ||
 8001814:	4293      	cmp	r3, r2
 8001816:	d142      	bne.n	800189e <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800181e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001820:	f001 ff7e 	bl	8003720 <HAL_GetTick>
 8001824:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	011a      	lsls	r2, r3, #4
 800182a:	d441      	bmi.n	80018b0 <RCCEx_PLLSAI1_Config+0xc8>
 800182c:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800182e:	2e00      	cmp	r6, #0
 8001830:	d045      	beq.n	80018be <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001832:	2e01      	cmp	r6, #1
 8001834:	d14f      	bne.n	80018d6 <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001836:	6922      	ldr	r2, [r4, #16]
 8001838:	6928      	ldr	r0, [r5, #16]
 800183a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800183e:	0840      	lsrs	r0, r0, #1
 8001840:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001844:	3801      	subs	r0, #1
 8001846:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800184a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 800184e:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001856:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001858:	f001 ff62 	bl	8003720 <HAL_GetTick>
 800185c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800185e:	6823      	ldr	r3, [r4, #0]
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	d545      	bpl.n	80018f0 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001864:	6923      	ldr	r3, [r4, #16]
 8001866:	69aa      	ldr	r2, [r5, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	6123      	str	r3, [r4, #16]
 800186c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800186e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001870:	2802      	cmp	r0, #2
 8001872:	d010      	beq.n	8001896 <RCCEx_PLLSAI1_Config+0xae>
 8001874:	2803      	cmp	r0, #3
 8001876:	d014      	beq.n	80018a2 <RCCEx_PLLSAI1_Config+0xba>
 8001878:	2801      	cmp	r0, #1
 800187a:	d110      	bne.n	800189e <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	079f      	lsls	r7, r3, #30
 8001880:	d5f5      	bpl.n	800186e <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001882:	68e3      	ldr	r3, [r4, #12]
 8001884:	686a      	ldr	r2, [r5, #4]
 8001886:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800188a:	3a01      	subs	r2, #1
 800188c:	4318      	orrs	r0, r3
 800188e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001892:	60e0      	str	r0, [r4, #12]
 8001894:	e7c0      	b.n	8001818 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800189c:	d1f1      	bne.n	8001882 <RCCEx_PLLSAI1_Config+0x9a>
 800189e:	2001      	movs	r0, #1
 80018a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	0391      	lsls	r1, r2, #14
 80018a6:	d4ec      	bmi.n	8001882 <RCCEx_PLLSAI1_Config+0x9a>
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80018ae:	e7f5      	b.n	800189c <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80018b0:	f001 ff36 	bl	8003720 <HAL_GetTick>
 80018b4:	1bc0      	subs	r0, r0, r7
 80018b6:	2802      	cmp	r0, #2
 80018b8:	d9b5      	bls.n	8001826 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80018ba:	2003      	movs	r0, #3
 80018bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80018be:	6922      	ldr	r2, [r4, #16]
 80018c0:	68e9      	ldr	r1, [r5, #12]
 80018c2:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 80018c6:	06c9      	lsls	r1, r1, #27
 80018c8:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 80018cc:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80018d0:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80018d2:	6123      	str	r3, [r4, #16]
 80018d4:	e7bc      	b.n	8001850 <RCCEx_PLLSAI1_Config+0x68>
 80018d6:	6923      	ldr	r3, [r4, #16]
 80018d8:	6968      	ldr	r0, [r5, #20]
 80018da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80018de:	0840      	lsrs	r0, r0, #1
 80018e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80018e4:	3801      	subs	r0, #1
 80018e6:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80018ea:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80018ee:	e7f0      	b.n	80018d2 <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80018f0:	f001 ff16 	bl	8003720 <HAL_GetTick>
 80018f4:	1b80      	subs	r0, r0, r6
 80018f6:	2802      	cmp	r0, #2
 80018f8:	d9b1      	bls.n	800185e <RCCEx_PLLSAI1_Config+0x76>
 80018fa:	e7de      	b.n	80018ba <RCCEx_PLLSAI1_Config+0xd2>
 80018fc:	40021000 	.word	0x40021000

08001900 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001904:	6805      	ldr	r5, [r0, #0]
 8001906:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 800190a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800190c:	d00e      	beq.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800190e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001910:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001914:	d05b      	beq.n	80019ce <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001916:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800191a:	d05d      	beq.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800191c:	2900      	cmp	r1, #0
 800191e:	d166      	bne.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0xee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001920:	3004      	adds	r0, #4
 8001922:	f7ff ff61 	bl	80017e8 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8001926:	4605      	mov	r5, r0
 8001928:	2800      	cmp	r0, #0
 800192a:	d055      	beq.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	039e      	lsls	r6, r3, #14
 8001930:	d56d      	bpl.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001932:	4eb7      	ldr	r6, [pc, #732]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001934:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001936:	00d8      	lsls	r0, r3, #3
 8001938:	d45b      	bmi.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001940:	65b3      	str	r3, [r6, #88]	; 0x58
 8001942:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001948:	9301      	str	r3, [sp, #4]
 800194a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800194c:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800194e:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8001c14 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8001952:	f8d8 3000 	ldr.w	r3, [r8]
 8001956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195a:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 800195e:	f001 fedf 	bl	8003720 <HAL_GetTick>
 8001962:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8001964:	f8d8 3000 	ldr.w	r3, [r8]
 8001968:	05d9      	lsls	r1, r3, #23
 800196a:	d544      	bpl.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    if(ret == HAL_OK)
 800196c:	2d00      	cmp	r5, #0
 800196e:	d149      	bne.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x104>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001970:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001974:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001978:	d014      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800197a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800197c:	4293      	cmp	r3, r2
 800197e:	d011      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001980:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001984:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001988:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800198c:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001990:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001998:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800199c:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80019a0:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80019a4:	07da      	lsls	r2, r3, #31
 80019a6:	d509      	bpl.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80019a8:	f001 feba 	bl	8003720 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ac:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80019b0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80019b2:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80019b6:	079b      	lsls	r3, r3, #30
 80019b8:	f140 8101 	bpl.w	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019bc:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80019c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80019c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019c6:	4313      	orrs	r3, r2
 80019c8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 80019cc:	e01a      	b.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80019ce:	4a90      	ldr	r2, [pc, #576]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80019d0:	68d3      	ldr	r3, [r2, #12]
 80019d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d6:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80019d8:	4a8d      	ldr	r2, [pc, #564]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80019da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80019dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80019e0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80019e4:	430b      	orrs	r3, r1
 80019e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80019ea:	2500      	movs	r5, #0
 80019ec:	e79e      	b.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 80019ee:	2501      	movs	r5, #1
 80019f0:	e79c      	b.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80019f2:	2700      	movs	r7, #0
 80019f4:	e7ab      	b.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f6:	f001 fe93 	bl	8003720 <HAL_GetTick>
 80019fa:	eba0 0009 	sub.w	r0, r0, r9
 80019fe:	2802      	cmp	r0, #2
 8001a00:	d9b0      	bls.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x64>
        ret = HAL_TIMEOUT;
 8001a02:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001a04:	b11f      	cbz	r7, 8001a0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a06:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a0e:	6823      	ldr	r3, [r4, #0]
 8001a10:	07df      	lsls	r7, r3, #31
 8001a12:	d508      	bpl.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a14:	497e      	ldr	r1, [pc, #504]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001a16:	6a20      	ldr	r0, [r4, #32]
 8001a18:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a1c:	f022 0203 	bic.w	r2, r2, #3
 8001a20:	4302      	orrs	r2, r0
 8001a22:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a26:	079e      	lsls	r6, r3, #30
 8001a28:	d508      	bpl.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a2a:	4979      	ldr	r1, [pc, #484]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001a2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a2e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a32:	f022 020c 	bic.w	r2, r2, #12
 8001a36:	4302      	orrs	r2, r0
 8001a38:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001a3c:	0758      	lsls	r0, r3, #29
 8001a3e:	d508      	bpl.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001a40:	4973      	ldr	r1, [pc, #460]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001a42:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001a44:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a48:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001a4c:	4302      	orrs	r2, r0
 8001a4e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a52:	0719      	lsls	r1, r3, #28
 8001a54:	d508      	bpl.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a56:	496e      	ldr	r1, [pc, #440]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001a58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001a5a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a5e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001a62:	4302      	orrs	r2, r0
 8001a64:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a68:	069a      	lsls	r2, r3, #26
 8001a6a:	d508      	bpl.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a6c:	4968      	ldr	r1, [pc, #416]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001a6e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001a70:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001a78:	4302      	orrs	r2, r0
 8001a7a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001a7e:	059f      	lsls	r7, r3, #22
 8001a80:	d508      	bpl.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a82:	4963      	ldr	r1, [pc, #396]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001a84:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001a86:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a8a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001a8e:	4302      	orrs	r2, r0
 8001a90:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001a94:	055e      	lsls	r6, r3, #21
 8001a96:	d508      	bpl.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001a98:	495d      	ldr	r1, [pc, #372]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001a9a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001a9c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001aa0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001aa4:	4302      	orrs	r2, r0
 8001aa6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001aaa:	0658      	lsls	r0, r3, #25
 8001aac:	d508      	bpl.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001aae:	4958      	ldr	r1, [pc, #352]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001ab0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001ab2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ab6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001aba:	4302      	orrs	r2, r0
 8001abc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ac0:	0619      	lsls	r1, r3, #24
 8001ac2:	d508      	bpl.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ac4:	4952      	ldr	r1, [pc, #328]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001ac6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001ac8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001acc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001ad0:	4302      	orrs	r2, r0
 8001ad2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ad6:	05da      	lsls	r2, r3, #23
 8001ad8:	d508      	bpl.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ada:	494d      	ldr	r1, [pc, #308]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001adc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001ade:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ae2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001ae6:	4302      	orrs	r2, r0
 8001ae8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001aec:	02df      	lsls	r7, r3, #11
 8001aee:	d508      	bpl.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x202>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001af0:	4947      	ldr	r1, [pc, #284]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001af2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001af4:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8001af8:	f022 0203 	bic.w	r2, r2, #3
 8001afc:	4302      	orrs	r2, r0
 8001afe:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001b02:	049e      	lsls	r6, r3, #18
 8001b04:	d50f      	bpl.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b06:	4a42      	ldr	r2, [pc, #264]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001b08:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001b0a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b0e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001b12:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001b14:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001b1c:	d157      	bne.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b1e:	68d3      	ldr	r3, [r2, #12]
 8001b20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b24:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	0318      	lsls	r0, r3, #12
 8001b2a:	d50f      	bpl.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001b2c:	4a38      	ldr	r2, [pc, #224]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001b2e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001b30:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b34:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001b38:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001b3a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001b3e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001b42:	d14f      	bne.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b44:	68d3      	ldr	r3, [r2, #12]
 8001b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b4a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	0359      	lsls	r1, r3, #13
 8001b50:	d50f      	bpl.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x272>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001b52:	4a2f      	ldr	r2, [pc, #188]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001b54:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001b56:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b5a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001b5e:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001b60:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001b68:	d147      	bne.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b6a:	68d3      	ldr	r3, [r2, #12]
 8001b6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b70:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	045a      	lsls	r2, r3, #17
 8001b76:	d512      	bpl.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b78:	4925      	ldr	r1, [pc, #148]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001b7a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b7c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b80:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001b84:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001b86:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x29e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001b90:	2102      	movs	r1, #2
 8001b92:	1d20      	adds	r0, r4, #4
 8001b94:	f7ff fe28 	bl	80017e8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	bf18      	it	ne
 8001b9c:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	03db      	lsls	r3, r3, #15
 8001ba2:	d508      	bpl.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ba4:	4a1a      	ldr	r2, [pc, #104]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001ba6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001ba8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	b003      	add	sp, #12
 8001bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f001 fdaf 	bl	8003720 <HAL_GetTick>
 8001bc2:	eba0 0008 	sub.w	r0, r0, r8
 8001bc6:	4548      	cmp	r0, r9
 8001bc8:	f67f aef3 	bls.w	80019b2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8001bcc:	e719      	b.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x102>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001bce:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001bd2:	d1a8      	bne.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x226>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	1d20      	adds	r0, r4, #4
 8001bd8:	f7ff fe06 	bl	80017e8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	bf18      	it	ne
 8001be0:	4605      	movne	r5, r0
 8001be2:	e7a0      	b.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x226>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001be4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001be8:	d1b0      	bne.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x24c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001bea:	2101      	movs	r1, #1
 8001bec:	1d20      	adds	r0, r4, #4
 8001bee:	f7ff fdfb 	bl	80017e8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	bf18      	it	ne
 8001bf6:	4605      	movne	r5, r0
 8001bf8:	e7a8      	b.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x24c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001bfa:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001bfe:	d1b8      	bne.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x272>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c00:	2101      	movs	r1, #1
 8001c02:	1d20      	adds	r0, r4, #4
 8001c04:	f7ff fdf0 	bl	80017e8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	bf18      	it	ne
 8001c0c:	4605      	movne	r5, r0
 8001c0e:	e7b0      	b.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40007000 	.word	0x40007000

08001c18 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8001c18:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c22:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_SD_ReadBlocks_DMA>:
{
 8001c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c2c:	4617      	mov	r7, r2
 8001c2e:	b087      	sub	sp, #28
 8001c30:	4604      	mov	r4, r0
 8001c32:	4698      	mov	r8, r3
  if(NULL == pData)
 8001c34:	460a      	mov	r2, r1
 8001c36:	b941      	cbnz	r1, 8001c4a <HAL_SD_ReadBlocks_DMA+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001c38:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001c3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c3e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001c40:	2501      	movs	r5, #1
}
 8001c42:	4628      	mov	r0, r5
 8001c44:	b007      	add	sp, #28
 8001c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8001c4a:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
 8001c4e:	b2f6      	uxtb	r6, r6
 8001c50:	2e01      	cmp	r6, #1
 8001c52:	d175      	bne.n	8001d40 <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001c54:	2300      	movs	r3, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001c56:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001c58:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001c5a:	eb07 0008 	add.w	r0, r7, r8
 8001c5e:	4288      	cmp	r0, r1
 8001c60:	d903      	bls.n	8001c6a <HAL_SD_ReadBlocks_DMA+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001c62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c68:	e7e9      	b.n	8001c3e <HAL_SD_ReadBlocks_DMA+0x16>
    hsd->Instance->DCTRL = 0U;
 8001c6a:	6825      	ldr	r5, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8001c6c:	2103      	movs	r1, #3
 8001c6e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001c72:	62eb      	str	r3, [r5, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8001c74:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001c76:	4933      	ldr	r1, [pc, #204]	; (8001d44 <HAL_SD_ReadBlocks_DMA+0x11c>)
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8001c78:	f440 7095 	orr.w	r0, r0, #298	; 0x12a
 8001c7c:	63e8      	str	r0, [r5, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001c7e:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001c80:	ea4f 2948 	mov.w	r9, r8, lsl #9
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001c84:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8001c86:	4930      	ldr	r1, [pc, #192]	; (8001d48 <HAL_SD_ReadBlocks_DMA+0x120>)
 8001c88:	6341      	str	r1, [r0, #52]	; 0x34
    hsd->hdmarx->XferAbortCallback = NULL;
 8001c8a:	6383      	str	r3, [r0, #56]	; 0x38
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001c8c:	f105 0180 	add.w	r1, r5, #128	; 0x80
 8001c90:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8001c94:	f7ff f8a3 	bl	8000dde <HAL_DMA_Start_IT>
 8001c98:	4605      	mov	r5, r0
 8001c9a:	6820      	ldr	r0, [r4, #0]
 8001c9c:	b165      	cbz	r5, 8001cb8 <HAL_SD_ReadBlocks_DMA+0x90>
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8001c9e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001ca0:	f423 7395 	bic.w	r3, r3, #298	; 0x12a
 8001ca4:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001ca6:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <HAL_SD_ReadBlocks_DMA+0x124>)
 8001ca8:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001caa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cb0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001cb2:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 8001cb6:	e7c3      	b.n	8001c40 <HAL_SD_ReadBlocks_DMA+0x18>
      __HAL_SD_DMA_ENABLE(hsd);
 8001cb8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001cba:	f043 0308 	orr.w	r3, r3, #8
 8001cbe:	62c3      	str	r3, [r0, #44]	; 0x2c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001cc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001cc2:	f44f 7100 	mov.w	r1, #512	; 0x200
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001cc6:	2b01      	cmp	r3, #1
        add *= 512U;
 8001cc8:	bf18      	it	ne
 8001cca:	027f      	lslne	r7, r7, #9
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001ccc:	f000 fea1 	bl	8002a12 <SDMMC_CmdBlockLength>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001cd0:	b148      	cbz	r0, 8001ce6 <HAL_SD_ReadBlocks_DMA+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	4a1d      	ldr	r2, [pc, #116]	; (8001d4c <HAL_SD_ReadBlocks_DMA+0x124>)
 8001cd6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001cd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001cda:	2501      	movs	r5, #1
        hsd->ErrorCode |= errorstate;
 8001cdc:	4318      	orrs	r0, r3
 8001cde:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001ce0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        return HAL_ERROR;
 8001ce4:	e7ad      	b.n	8001c42 <HAL_SD_ReadBlocks_DMA+0x1a>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001cea:	e88d 0208 	stmia.w	sp, {r3, r9}
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8001cee:	2390      	movs	r3, #144	; 0x90
 8001cf0:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8001cf6:	9004      	str	r0, [sp, #16]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8001cf8:	2301      	movs	r3, #1
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8001cfa:	4669      	mov	r1, sp
 8001cfc:	6820      	ldr	r0, [r4, #0]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8001cfe:	9305      	str	r3, [sp, #20]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8001d00:	f000 fe75 	bl	80029ee <SDMMC_ConfigData>
      if(NumberOfBlocks > 1U)
 8001d04:	f1b8 0f01 	cmp.w	r8, #1
 8001d08:	d913      	bls.n	8001d32 <HAL_SD_ReadBlocks_DMA+0x10a>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001d0a:	2382      	movs	r3, #130	; 0x82
 8001d0c:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001d0e:	4639      	mov	r1, r7
 8001d10:	6820      	ldr	r0, [r4, #0]
 8001d12:	f000 feae 	bl	8002a72 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001d16:	2800      	cmp	r0, #0
 8001d18:	d093      	beq.n	8001c42 <HAL_SD_ReadBlocks_DMA+0x1a>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <HAL_SD_ReadBlocks_DMA+0x124>)
 8001d1e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001d20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001d22:	2501      	movs	r5, #1
        hsd->ErrorCode |= errorstate;
 8001d24:	4318      	orrs	r0, r3
        hsd->Context = SD_CONTEXT_NONE;
 8001d26:	2300      	movs	r3, #0
        hsd->ErrorCode |= errorstate;
 8001d28:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001d2a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001d2e:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8001d30:	e787      	b.n	8001c42 <HAL_SD_ReadBlocks_DMA+0x1a>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001d32:	2381      	movs	r3, #129	; 0x81
 8001d34:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001d36:	4639      	mov	r1, r7
 8001d38:	6820      	ldr	r0, [r4, #0]
 8001d3a:	f000 fe82 	bl	8002a42 <SDMMC_CmdReadSingleBlock>
 8001d3e:	e7ea      	b.n	8001d16 <HAL_SD_ReadBlocks_DMA+0xee>
    return HAL_BUSY;
 8001d40:	2502      	movs	r5, #2
 8001d42:	e77e      	b.n	8001c42 <HAL_SD_ReadBlocks_DMA+0x1a>
 8001d44:	08001e7b 	.word	0x08001e7b
 8001d48:	080022a9 	.word	0x080022a9
 8001d4c:	004005ff 	.word	0x004005ff

08001d50 <HAL_SD_WriteBlocks_DMA>:
{
 8001d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d54:	4604      	mov	r4, r0
 8001d56:	b086      	sub	sp, #24
 8001d58:	4616      	mov	r6, r2
 8001d5a:	461f      	mov	r7, r3
  if(NULL == pData)
 8001d5c:	4688      	mov	r8, r1
 8001d5e:	b941      	cbnz	r1, 8001d72 <HAL_SD_WriteBlocks_DMA+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001d60:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d66:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8001d68:	2501      	movs	r5, #1
}
 8001d6a:	4628      	mov	r0, r5
 8001d6c:	b006      	add	sp, #24
 8001d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8001d72:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 8001d76:	b2ed      	uxtb	r5, r5
 8001d78:	2d01      	cmp	r5, #1
 8001d7a:	d175      	bne.n	8001e68 <HAL_SD_WriteBlocks_DMA+0x118>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001d7c:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001d7e:	18f3      	adds	r3, r6, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001d80:	2200      	movs	r2, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001d82:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001d84:	6382      	str	r2, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001d86:	d904      	bls.n	8001d92 <HAL_SD_WriteBlocks_DMA+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001d88:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 8001d90:	e7eb      	b.n	8001d6a <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8001d92:	2303      	movs	r3, #3
 8001d94:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001d98:	6800      	ldr	r0, [r0, #0]
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8001d9a:	4934      	ldr	r1, [pc, #208]	; (8001e6c <HAL_SD_WriteBlocks_DMA+0x11c>)
    hsd->Instance->DCTRL = 0U;
 8001d9c:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8001d9e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001da0:	f043 031a 	orr.w	r3, r3, #26
 8001da4:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8001da6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001da8:	62d9      	str	r1, [r3, #44]	; 0x2c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8001daa:	4931      	ldr	r1, [pc, #196]	; (8001e70 <HAL_SD_WriteBlocks_DMA+0x120>)
 8001dac:	6359      	str	r1, [r3, #52]	; 0x34
    hsd->hdmatx->XferAbortCallback = NULL;
 8001dae:	639a      	str	r2, [r3, #56]	; 0x38
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001db0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001db2:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001db6:	2b01      	cmp	r3, #1
      add *= 512U;
 8001db8:	bf18      	it	ne
 8001dba:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001dbc:	f000 fe29 	bl	8002a12 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001dc0:	b148      	cbz	r0, 8001dd6 <HAL_SD_WriteBlocks_DMA+0x86>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	4a2b      	ldr	r2, [pc, #172]	; (8001e74 <HAL_SD_WriteBlocks_DMA+0x124>)
 8001dc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001dc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001dca:	2501      	movs	r5, #1
      hsd->ErrorCode |= errorstate;
 8001dcc:	4318      	orrs	r0, r3
 8001dce:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001dd0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_ERROR;
 8001dd4:	e7c9      	b.n	8001d6a <HAL_SD_WriteBlocks_DMA+0x1a>
    if(NumberOfBlocks > 1U)
 8001dd6:	2f01      	cmp	r7, #1
 8001dd8:	d913      	bls.n	8001e02 <HAL_SD_WriteBlocks_DMA+0xb2>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001dda:	23a0      	movs	r3, #160	; 0xa0
 8001ddc:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001dde:	4631      	mov	r1, r6
 8001de0:	6820      	ldr	r0, [r4, #0]
 8001de2:	f000 fe76 	bl	8002ad2 <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001de6:	4606      	mov	r6, r0
 8001de8:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8001dea:	b188      	cbz	r0, 8001e10 <HAL_SD_WriteBlocks_DMA+0xc0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8001dec:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <HAL_SD_WriteBlocks_DMA+0x124>)
 8001dee:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001df0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001df2:	2501      	movs	r5, #1
      hsd->ErrorCode |= errorstate;
 8001df4:	431e      	orrs	r6, r3
      hsd->Context = SD_CONTEXT_NONE;
 8001df6:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 8001df8:	63a6      	str	r6, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001dfa:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001dfe:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001e00:	e7b3      	b.n	8001d6a <HAL_SD_WriteBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001e02:	2390      	movs	r3, #144	; 0x90
 8001e04:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001e06:	4631      	mov	r1, r6
 8001e08:	6820      	ldr	r0, [r4, #0]
 8001e0a:	f000 fe4a 	bl	8002aa2 <SDMMC_CmdWriteSingleBlock>
 8001e0e:	e7ea      	b.n	8001de6 <HAL_SD_WriteBlocks_DMA+0x96>
    __HAL_SD_DMA_ENABLE(hsd);
 8001e10:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001e12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    __HAL_SD_DMA_ENABLE(hsd);
 8001e14:	f043 0308 	orr.w	r3, r3, #8
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001e18:	027f      	lsls	r7, r7, #9
    __HAL_SD_DMA_ENABLE(hsd);
 8001e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001e1c:	4641      	mov	r1, r8
 8001e1e:	08bb      	lsrs	r3, r7, #2
 8001e20:	3280      	adds	r2, #128	; 0x80
 8001e22:	f7fe ffdc 	bl	8000dde <HAL_DMA_Start_IT>
 8001e26:	4605      	mov	r5, r0
 8001e28:	b178      	cbz	r0, 8001e4a <HAL_SD_WriteBlocks_DMA+0xfa>
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e2e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8001e32:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001e34:	4a0f      	ldr	r2, [pc, #60]	; (8001e74 <HAL_SD_WriteBlocks_DMA+0x124>)
 8001e36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001e38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e3a:	2501      	movs	r5, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001e3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e40:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e42:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001e46:	6326      	str	r6, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001e48:	e78f      	b.n	8001d6a <HAL_SD_WriteBlocks_DMA+0x1a>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001e4e:	e88d 0088 	stmia.w	sp, {r3, r7}
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8001e52:	2390      	movs	r3, #144	; 0x90
 8001e54:	9302      	str	r3, [sp, #8]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8001e56:	4669      	mov	r1, sp
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8001e58:	2301      	movs	r3, #1
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8001e5a:	6820      	ldr	r0, [r4, #0]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8001e5c:	9603      	str	r6, [sp, #12]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8001e5e:	9604      	str	r6, [sp, #16]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8001e60:	9305      	str	r3, [sp, #20]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8001e62:	f000 fdc4 	bl	80029ee <SDMMC_ConfigData>
      return HAL_OK;
 8001e66:	e780      	b.n	8001d6a <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 8001e68:	2502      	movs	r5, #2
 8001e6a:	e77e      	b.n	8001d6a <HAL_SD_WriteBlocks_DMA+0x1a>
 8001e6c:	08001c19 	.word	0x08001c19
 8001e70:	080022a9 	.word	0x080022a9
 8001e74:	004005ff 	.word	0x004005ff

08001e78 <HAL_SD_ErrorCallback>:
 8001e78:	4770      	bx	lr

08001e7a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8001e7a:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8001e7c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  uint32_t errorstate;
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8001e7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e80:	2b82      	cmp	r3, #130	; 0x82
 8001e82:	d109      	bne.n	8001e98 <SD_DMAReceiveCplt+0x1e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001e84:	6820      	ldr	r0, [r4, #0]
 8001e86:	f000 fe3d 	bl	8002b04 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e8a:	b128      	cbz	r0, 8001e98 <SD_DMAReceiveCplt+0x1e>
    {
      hsd->ErrorCode |= errorstate;
 8001e8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e8e:	4318      	orrs	r0, r3
 8001e90:	63a0      	str	r0, [r4, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7ff fff0 	bl	8001e78 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9c:	f022 0208 	bic.w	r2, r2, #8
 8001ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8001ea2:	f240 523a 	movw	r2, #1338	; 0x53a
 8001ea6:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	6323      	str	r3, [r4, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f001 f829 	bl	8002f0a <HAL_SD_RxCpltCallback>
 8001eb8:	bd10      	pop	{r4, pc}
	...

08001ebc <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8001ebc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001ebe:	0f9a      	lsrs	r2, r3, #30
 8001ec0:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8001ec2:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8001ec6:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8001ec8:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8001ecc:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8001ece:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8001ed2:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8001ed4:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8001ed8:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8001eda:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8001edc:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8001ede:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001ee0:	0d1a      	lsrs	r2, r3, #20
 8001ee2:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8001ee4:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8001ee8:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8001eea:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8001eee:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8001ef0:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8001ef4:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8001ef6:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8001efa:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8001efc:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8001f00:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8001f02:	2200      	movs	r2, #0
 8001f04:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8001f06:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8001f08:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8001f0a:	2a00      	cmp	r2, #0
 8001f0c:	d16b      	bne.n	8001fe6 <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8001f0e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001f10:	f640 74fc 	movw	r4, #4092	; 0xffc
 8001f14:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8001f18:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8001f1c:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8001f1e:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8001f22:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8001f24:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8001f28:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8001f2a:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8001f2e:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8001f30:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8001f34:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8001f38:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8001f3a:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001f3c:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8001f3e:	7e0a      	ldrb	r2, [r1, #24]
 8001f40:	f002 0207 	and.w	r2, r2, #7
 8001f44:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001f46:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8001f48:	4093      	lsls	r3, r2
 8001f4a:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8001f4c:	7a0a      	ldrb	r2, [r1, #8]
 8001f4e:	f002 040f 	and.w	r4, r2, #15
 8001f52:	2201      	movs	r2, #1
 8001f54:	40a2      	lsls	r2, r4
 8001f56:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8001f58:	0a52      	lsrs	r2, r2, #9
 8001f5a:	4353      	muls	r3, r2
 8001f5c:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8001f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8001f62:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8001f64:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001f66:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8001f6a:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8001f6c:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8001f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8001f74:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8001f76:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8001f78:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001f7a:	0fda      	lsrs	r2, r3, #31
 8001f7c:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8001f7e:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8001f82:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8001f84:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8001f88:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8001f8a:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8001f8e:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8001f90:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8001f94:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8001f98:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8001f9a:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8001f9e:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8001fa2:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8001fa6:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8001faa:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8001fae:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8001fb2:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8001fb6:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8001fba:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8001fbe:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8001fc2:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8001fc6:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8001fca:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8001fce:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8001fd2:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8001fd6:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8001fda:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8001fe4:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8001fe6:	2a01      	cmp	r2, #1
 8001fe8:	d10f      	bne.n	800200a <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8001fea:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8001fee:	041b      	lsls	r3, r3, #16
 8001ff0:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8001ff8:	690b      	ldr	r3, [r1, #16]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	029b      	lsls	r3, r3, #10
 8001ffe:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002000:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002002:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002006:	6583      	str	r3, [r0, #88]	; 0x58
 8002008:	e7ab      	b.n	8001f62 <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 800200a:	6803      	ldr	r3, [r0, #0]
 800200c:	4a05      	ldr	r2, [pc, #20]	; (8002024 <HAL_SD_GetCardCSD+0x168>)
 800200e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002010:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002016:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002018:	2301      	movs	r3, #1
 800201a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800201e:	4618      	mov	r0, r3
 8002020:	bd10      	pop	{r4, pc}
 8002022:	bf00      	nop
 8002024:	004005ff 	.word	0x004005ff

08002028 <HAL_SD_InitCard>:
{
 8002028:	b570      	push	{r4, r5, r6, lr}
 800202a:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800202c:	2300      	movs	r3, #0
 800202e:	9307      	str	r3, [sp, #28]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002030:	9308      	str	r3, [sp, #32]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002032:	9309      	str	r3, [sp, #36]	; 0x24
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002034:	930a      	str	r3, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002036:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002038:	2376      	movs	r3, #118	; 0x76
 800203a:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDMMC_Init(hsd->Instance, Init);
 800203c:	ab0a      	add	r3, sp, #40	; 0x28
{
 800203e:	4604      	mov	r4, r0
  status = SDMMC_Init(hsd->Instance, Init);
 8002040:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002044:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002048:	ab07      	add	r3, sp, #28
 800204a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800204c:	6820      	ldr	r0, [r4, #0]
 800204e:	f000 fc95 	bl	800297c <SDMMC_Init>
  if(status != HAL_OK)
 8002052:	b118      	cbz	r0, 800205c <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8002054:	2501      	movs	r5, #1
}
 8002056:	4628      	mov	r0, r5
 8002058:	b018      	add	sp, #96	; 0x60
 800205a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_SD_DISABLE(hsd); 
 800205c:	6820      	ldr	r0, [r4, #0]
 800205e:	6843      	ldr	r3, [r0, #4]
 8002060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002064:	6043      	str	r3, [r0, #4]
  status = SDMMC_PowerState_ON(hsd->Instance);
 8002066:	f000 fca5 	bl	80029b4 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 800206a:	4605      	mov	r5, r0
 800206c:	2800      	cmp	r0, #0
 800206e:	d1f1      	bne.n	8002054 <HAL_SD_InitCard+0x2c>
  __HAL_SD_ENABLE(hsd);
 8002070:	6822      	ldr	r2, [r4, #0]
 8002072:	6853      	ldr	r3, [r2, #4]
 8002074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002078:	6053      	str	r3, [r2, #4]
  HAL_Delay(2U);
 800207a:	2002      	movs	r0, #2
 800207c:	f001 fb38 	bl	80036f0 <HAL_Delay>
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002080:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 8002082:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002084:	f000 fd70 	bl	8002b68 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002088:	4606      	mov	r6, r0
 800208a:	b970      	cbnz	r0, 80020aa <HAL_SD_InitCard+0x82>
  {
    return errorstate;
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800208c:	6820      	ldr	r0, [r4, #0]
 800208e:	f000 fd93 	bl	8002bb8 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002092:	2800      	cmp	r0, #0
 8002094:	d073      	beq.n	800217e <HAL_SD_InitCard+0x156>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002096:	64a6      	str	r6, [r4, #72]	; 0x48
      
#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002098:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800209c:	9b06      	ldr	r3, [sp, #24]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	42ab      	cmp	r3, r5
 80020a2:	9206      	str	r2, [sp, #24]
 80020a4:	d108      	bne.n	80020b8 <HAL_SD_InitCard+0x90>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80020a6:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 80020aa:	2501      	movs	r5, #1
 80020ac:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80020b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80020b2:	430e      	orrs	r6, r1
 80020b4:	63a6      	str	r6, [r4, #56]	; 0x38
 80020b6:	e7ce      	b.n	8002056 <HAL_SD_InitCard+0x2e>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80020b8:	2100      	movs	r1, #0
 80020ba:	6820      	ldr	r0, [r4, #0]
 80020bc:	f000 fdb8 	bl	8002c30 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80020c0:	4601      	mov	r1, r0
 80020c2:	b110      	cbz	r0, 80020ca <HAL_SD_InitCard+0xa2>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80020c4:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80020c8:	e7ef      	b.n	80020aa <HAL_SD_InitCard+0x82>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80020ca:	6820      	ldr	r0, [r4, #0]
 80020cc:	f000 fdc8 	bl	8002c60 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80020d0:	4601      	mov	r1, r0
 80020d2:	2800      	cmp	r0, #0
 80020d4:	d1f6      	bne.n	80020c4 <HAL_SD_InitCard+0x9c>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80020d6:	6820      	ldr	r0, [r4, #0]
 80020d8:	f000 fc86 	bl	80029e8 <SDMMC_GetResponse>
    while(validvoltage == 0U)
 80020dc:	2800      	cmp	r0, #0
 80020de:	dadd      	bge.n	800209c <HAL_SD_InitCard+0x74>
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80020e0:	2300      	movs	r3, #0
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80020e2:	6463      	str	r3, [r4, #68]	; 0x44
  if(SDMMC_GetPowerState(hsd->Instance) == 0U) 
 80020e4:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U) 
 80020ec:	f000 fc66 	bl	80029bc <SDMMC_GetPowerState>
 80020f0:	2800      	cmp	r0, #0
 80020f2:	f000 8095 	beq.w	8002220 <HAL_SD_InitCard+0x1f8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80020f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d019      	beq.n	8002130 <HAL_SD_InitCard+0x108>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80020fc:	6820      	ldr	r0, [r4, #0]
 80020fe:	f000 fdc8 	bl	8002c92 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002102:	2800      	cmp	r0, #0
 8002104:	d164      	bne.n	80021d0 <HAL_SD_InitCard+0x1a8>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002106:	4601      	mov	r1, r0
 8002108:	6820      	ldr	r0, [r4, #0]
 800210a:	f000 fc6d 	bl	80029e8 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800210e:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002110:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8002112:	6820      	ldr	r0, [r4, #0]
 8002114:	f000 fc68 	bl	80029e8 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8002118:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800211a:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800211c:	6820      	ldr	r0, [r4, #0]
 800211e:	f000 fc63 	bl	80029e8 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8002122:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8002124:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8002126:	6820      	ldr	r0, [r4, #0]
 8002128:	f000 fc5e 	bl	80029e8 <SDMMC_GetResponse>
 800212c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002130:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002132:	2b03      	cmp	r3, #3
 8002134:	d145      	bne.n	80021c2 <HAL_SD_InitCard+0x19a>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002136:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002138:	2b03      	cmp	r3, #3
 800213a:	d150      	bne.n	80021de <HAL_SD_InitCard+0x1b6>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800213c:	2104      	movs	r1, #4
 800213e:	6820      	ldr	r0, [r4, #0]
 8002140:	f000 fc52 	bl	80029e8 <SDMMC_GetResponse>
 8002144:	0d00      	lsrs	r0, r0, #20
 8002146:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002148:	a90d      	add	r1, sp, #52	; 0x34
 800214a:	4620      	mov	r0, r4
 800214c:	f7ff feb6 	bl	8001ebc <HAL_SD_GetCardCSD>
 8002150:	4605      	mov	r5, r0
 8002152:	2800      	cmp	r0, #0
 8002154:	d161      	bne.n	800221a <HAL_SD_InitCard+0x1f2>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8002156:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002158:	4603      	mov	r3, r0
 800215a:	0412      	lsls	r2, r2, #16
 800215c:	6820      	ldr	r0, [r4, #0]
 800215e:	f000 fceb 	bl	8002b38 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002162:	2800      	cmp	r0, #0
 8002164:	d134      	bne.n	80021d0 <HAL_SD_InitCard+0x1a8>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8002166:	f104 0310 	add.w	r3, r4, #16
 800216a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800216e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002172:	1d23      	adds	r3, r4, #4
 8002174:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002176:	6820      	ldr	r0, [r4, #0]
 8002178:	f000 fc00 	bl	800297c <SDMMC_Init>
 800217c:	e76b      	b.n	8002056 <HAL_SD_InitCard+0x2e>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800217e:	2301      	movs	r3, #1
 8002180:	64a3      	str	r3, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002182:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8002186:	9b06      	ldr	r3, [sp, #24]
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	42ab      	cmp	r3, r5
 800218c:	9206      	str	r2, [sp, #24]
 800218e:	d08a      	beq.n	80020a6 <HAL_SD_InitCard+0x7e>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002190:	2100      	movs	r1, #0
 8002192:	6820      	ldr	r0, [r4, #0]
 8002194:	f000 fd4c 	bl	8002c30 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002198:	4606      	mov	r6, r0
 800219a:	2800      	cmp	r0, #0
 800219c:	d185      	bne.n	80020aa <HAL_SD_InitCard+0x82>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800219e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80021a2:	6820      	ldr	r0, [r4, #0]
 80021a4:	f000 fd5c 	bl	8002c60 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80021a8:	4606      	mov	r6, r0
 80021aa:	2800      	cmp	r0, #0
 80021ac:	f47f af7d 	bne.w	80020aa <HAL_SD_InitCard+0x82>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80021b0:	4601      	mov	r1, r0
 80021b2:	6820      	ldr	r0, [r4, #0]
 80021b4:	f000 fc18 	bl	80029e8 <SDMMC_GetResponse>
    while(validvoltage == 0U)
 80021b8:	0fc3      	lsrs	r3, r0, #31
 80021ba:	d0e4      	beq.n	8002186 <HAL_SD_InitCard+0x15e>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80021bc:	0042      	lsls	r2, r0, #1
 80021be:	d58f      	bpl.n	80020e0 <HAL_SD_InitCard+0xb8>
 80021c0:	e78f      	b.n	80020e2 <HAL_SD_InitCard+0xba>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80021c2:	f10d 0116 	add.w	r1, sp, #22
 80021c6:	6820      	ldr	r0, [r4, #0]
 80021c8:	f000 fd8e 	bl	8002ce8 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d0b2      	beq.n	8002136 <HAL_SD_InitCard+0x10e>
    hsd->State = HAL_SD_STATE_READY;
 80021d0:	2501      	movs	r5, #1
 80021d2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80021d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80021d8:	4308      	orrs	r0, r1
 80021da:	63a0      	str	r0, [r4, #56]	; 0x38
 80021dc:	e73b      	b.n	8002056 <HAL_SD_InitCard+0x2e>
    hsd->SdCard.RelCardAdd = sd_rca;
 80021de:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80021e2:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80021e4:	6820      	ldr	r0, [r4, #0]
 80021e6:	0409      	lsls	r1, r1, #16
 80021e8:	f000 fd68 	bl	8002cbc <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80021ec:	2800      	cmp	r0, #0
 80021ee:	d1ef      	bne.n	80021d0 <HAL_SD_InitCard+0x1a8>
      hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80021f0:	4601      	mov	r1, r0
 80021f2:	6820      	ldr	r0, [r4, #0]
 80021f4:	f000 fbf8 	bl	80029e8 <SDMMC_GetResponse>
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80021f8:	2104      	movs	r1, #4
      hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80021fa:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80021fc:	6820      	ldr	r0, [r4, #0]
 80021fe:	f000 fbf3 	bl	80029e8 <SDMMC_GetResponse>
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8002202:	2108      	movs	r1, #8
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8002204:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8002206:	6820      	ldr	r0, [r4, #0]
 8002208:	f000 fbee 	bl	80029e8 <SDMMC_GetResponse>
      hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800220c:	210c      	movs	r1, #12
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800220e:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8002210:	6820      	ldr	r0, [r4, #0]
 8002212:	f000 fbe9 	bl	80029e8 <SDMMC_GetResponse>
 8002216:	6720      	str	r0, [r4, #112]	; 0x70
 8002218:	e790      	b.n	800213c <HAL_SD_InitCard+0x114>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800221a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800221e:	e7d7      	b.n	80021d0 <HAL_SD_InitCard+0x1a8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002220:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002224:	e7d4      	b.n	80021d0 <HAL_SD_InitCard+0x1a8>

08002226 <HAL_SD_Init>:
{ 
 8002226:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8002228:	4604      	mov	r4, r0
 800222a:	b908      	cbnz	r0, 8002230 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 800222c:	2001      	movs	r0, #1
 800222e:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8002230:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8002234:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002238:	b913      	cbnz	r3, 8002240 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 800223a:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800223c:	f001 f97c 	bl	8003538 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8002240:	2303      	movs	r3, #3
 8002242:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002246:	4620      	mov	r0, r4
 8002248:	f7ff feee 	bl	8002028 <HAL_SD_InitCard>
 800224c:	2800      	cmp	r0, #0
 800224e:	d1ed      	bne.n	800222c <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8002250:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002252:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8002254:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8002256:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800225a:	bd10      	pop	{r4, pc}

0800225c <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800225c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800225e:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002260:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002262:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002264:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002266:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002268:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800226a:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800226c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800226e:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002270:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002272:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002274:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002276:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002278:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800227a:	61cb      	str	r3, [r1, #28]
}
 800227c:	2000      	movs	r0, #0
 800227e:	4770      	bx	lr

08002280 <HAL_SD_GetCardState>:
  {
    return HAL_SD_ERROR_PARAM;
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8002280:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8002282:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8002284:	0409      	lsls	r1, r1, #16
{
 8002286:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8002288:	6800      	ldr	r0, [r0, #0]
 800228a:	f000 fd7b 	bl	8002d84 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800228e:	4601      	mov	r1, r0
 8002290:	b928      	cbnz	r0, 800229e <HAL_SD_GetCardState+0x1e>
  {
    return errorstate;
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002292:	6820      	ldr	r0, [r4, #0]
 8002294:	f000 fba8 	bl	80029e8 <SDMMC_GetResponse>
  return (HAL_SD_CardStateTypedef)cardstate;
 8002298:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800229c:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 800229e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022a0:	4319      	orrs	r1, r3
 80022a2:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 80022a4:	2000      	movs	r0, #0
 80022a6:	e7f7      	b.n	8002298 <HAL_SD_GetCardState+0x18>

080022a8 <SD_DMAError>:
{
 80022a8:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80022aa:	6a84      	ldr	r4, [r0, #40]	; 0x28
  RxErrorCode = hsd->hdmarx->ErrorCode;
 80022ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  TxErrorCode = hsd->hdmatx->ErrorCode;  
 80022b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80022b2:	2a01      	cmp	r2, #1
  TxErrorCode = hsd->hdmatx->ErrorCode;  
 80022b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80022b6:	d001      	beq.n	80022bc <SD_DMAError+0x14>
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d11c      	bne.n	80022f6 <SD_DMAError+0x4e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	4a10      	ldr	r2, [pc, #64]	; (8002300 <SD_DMAError+0x58>)
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80022c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022c4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80022c8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80022ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022d0:	63a3      	str	r3, [r4, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7ff ffd4 	bl	8002280 <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80022d8:	3805      	subs	r0, #5
 80022da:	b2c0      	uxtb	r0, r0
 80022dc:	2801      	cmp	r0, #1
 80022de:	d805      	bhi.n	80022ec <SD_DMAError+0x44>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80022e0:	6820      	ldr	r0, [r4, #0]
 80022e2:	f000 fc0f 	bl	8002b04 <SDMMC_CmdStopTransfer>
 80022e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022e8:	4318      	orrs	r0, r3
 80022ea:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State= HAL_SD_STATE_READY;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_ErrorCallback(hsd);
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7ff fdbe 	bl	8001e78 <HAL_SD_ErrorCallback>
 80022fc:	bd10      	pop	{r4, pc}
 80022fe:	bf00      	nop
 8002300:	004005ff 	.word	0x004005ff

08002304 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002304:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002306:	69c1      	ldr	r1, [r0, #28]
{
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800230c:	6883      	ldr	r3, [r0, #8]
 800230e:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002310:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002312:	4303      	orrs	r3, r0
 8002314:	6960      	ldr	r0, [r4, #20]
 8002316:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002318:	48af      	ldr	r0, [pc, #700]	; (80025d8 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800231a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800231c:	4028      	ands	r0, r5
 800231e:	4303      	orrs	r3, r0
 8002320:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002322:	6853      	ldr	r3, [r2, #4]
 8002324:	68e0      	ldr	r0, [r4, #12]
 8002326:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800232a:	4303      	orrs	r3, r0
 800232c:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800232e:	4bab      	ldr	r3, [pc, #684]	; (80025dc <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002330:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002332:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002334:	bf1c      	itt	ne
 8002336:	6a23      	ldrne	r3, [r4, #32]
 8002338:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800233a:	6893      	ldr	r3, [r2, #8]
 800233c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002340:	4303      	orrs	r3, r0
 8002342:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002344:	4ba6      	ldr	r3, [pc, #664]	; (80025e0 <UART_SetConfig+0x2dc>)
 8002346:	429a      	cmp	r2, r3
 8002348:	d118      	bne.n	800237c <UART_SetConfig+0x78>
 800234a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800234e:	4aa5      	ldr	r2, [pc, #660]	; (80025e4 <UART_SetConfig+0x2e0>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002354:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002358:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800235c:	5cd3      	ldrb	r3, [r2, r3]
 800235e:	f040 8123 	bne.w	80025a8 <UART_SetConfig+0x2a4>
  {
    switch (clocksource)
 8002362:	2b08      	cmp	r3, #8
 8002364:	d877      	bhi.n	8002456 <UART_SetConfig+0x152>
 8002366:	e8df f013 	tbh	[pc, r3, lsl #1]
 800236a:	0100      	.short	0x0100
 800236c:	00e200b3 	.word	0x00e200b3
 8002370:	011c0076 	.word	0x011c0076
 8002374:	00760076 	.word	0x00760076
 8002378:	00360076 	.word	0x00360076
  UART_GETCLOCKSOURCE(huart, clocksource);
 800237c:	4b9a      	ldr	r3, [pc, #616]	; (80025e8 <UART_SetConfig+0x2e4>)
 800237e:	429a      	cmp	r2, r3
 8002380:	d107      	bne.n	8002392 <UART_SetConfig+0x8e>
 8002382:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002386:	4a99      	ldr	r2, [pc, #612]	; (80025ec <UART_SetConfig+0x2e8>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	e7e2      	b.n	8002358 <UART_SetConfig+0x54>
 8002392:	4b97      	ldr	r3, [pc, #604]	; (80025f0 <UART_SetConfig+0x2ec>)
 8002394:	429a      	cmp	r2, r3
 8002396:	d123      	bne.n	80023e0 <UART_SetConfig+0xdc>
 8002398:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	f000 80f9 	beq.w	800259c <UART_SetConfig+0x298>
 80023aa:	d80b      	bhi.n	80023c4 <UART_SetConfig+0xc0>
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80d9 	beq.w	8002564 <UART_SetConfig+0x260>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023b2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80023b6:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80023ba:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023be:	f000 80de 	beq.w	800257e <UART_SetConfig+0x27a>
 80023c2:	e091      	b.n	80024e8 <UART_SetConfig+0x1e4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	f000 80af 	beq.w	8002528 <UART_SetConfig+0x224>
 80023ca:	2b30      	cmp	r3, #48	; 0x30
 80023cc:	d1f1      	bne.n	80023b2 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ce:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80023d2:	f040 80a1 	bne.w	8002518 <UART_SetConfig+0x214>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023d6:	6860      	ldr	r0, [r4, #4]
 80023d8:	0843      	lsrs	r3, r0, #1
 80023da:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80023de:	e0ac      	b.n	800253a <UART_SetConfig+0x236>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023e0:	4b84      	ldr	r3, [pc, #528]	; (80025f4 <UART_SetConfig+0x2f0>)
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d11c      	bne.n	8002420 <UART_SetConfig+0x11c>
 80023e6:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80023f2:	2b40      	cmp	r3, #64	; 0x40
 80023f4:	f000 80af 	beq.w	8002556 <UART_SetConfig+0x252>
 80023f8:	d806      	bhi.n	8002408 <UART_SetConfig+0x104>
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 80a0 	beq.w	8002540 <UART_SetConfig+0x23c>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002400:	4b76      	ldr	r3, [pc, #472]	; (80025dc <UART_SetConfig+0x2d8>)
 8002402:	429a      	cmp	r2, r3
 8002404:	d1d5      	bne.n	80023b2 <UART_SetConfig+0xae>
 8002406:	e026      	b.n	8002456 <UART_SetConfig+0x152>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002408:	2b80      	cmp	r3, #128	; 0x80
 800240a:	f000 808a 	beq.w	8002522 <UART_SetConfig+0x21e>
 800240e:	2bc0      	cmp	r3, #192	; 0xc0
 8002410:	d1f6      	bne.n	8002400 <UART_SetConfig+0xfc>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002412:	4b72      	ldr	r3, [pc, #456]	; (80025dc <UART_SetConfig+0x2d8>)
 8002414:	429a      	cmp	r2, r3
 8002416:	d1da      	bne.n	80023ce <UART_SetConfig+0xca>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002418:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 800241c:	2308      	movs	r3, #8
 800241e:	e015      	b.n	800244c <UART_SetConfig+0x148>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002420:	4b6e      	ldr	r3, [pc, #440]	; (80025dc <UART_SetConfig+0x2d8>)
 8002422:	429a      	cmp	r2, r3
 8002424:	d1c5      	bne.n	80023b2 <UART_SetConfig+0xae>
 8002426:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002436:	f000 808e 	beq.w	8002556 <UART_SetConfig+0x252>
 800243a:	d9de      	bls.n	80023fa <UART_SetConfig+0xf6>
 800243c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002440:	d06f      	beq.n	8002522 <UART_SetConfig+0x21e>
 8002442:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002446:	e7e3      	b.n	8002410 <UART_SetConfig+0x10c>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002448:	486b      	ldr	r0, [pc, #428]	; (80025f8 <UART_SetConfig+0x2f4>)
  if (UART_INSTANCE_LOWPOWER(huart))
 800244a:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800244c:	6862      	ldr	r2, [r4, #4]
 800244e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002452:	4281      	cmp	r1, r0
 8002454:	d905      	bls.n	8002462 <UART_SetConfig+0x15e>
        ret = HAL_ERROR;
 8002456:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002458:	2300      	movs	r3, #0
 800245a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800245c:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800245e:	4610      	mov	r0, r2
 8002460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002462:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002466:	d8f6      	bhi.n	8002456 <UART_SetConfig+0x152>
        switch (clocksource)
 8002468:	2b08      	cmp	r3, #8
 800246a:	d82e      	bhi.n	80024ca <UART_SetConfig+0x1c6>
 800246c:	e8df f003 	tbb	[pc, r3]
 8002470:	2d1c2d05 	.word	0x2d1c2d05
 8002474:	2d2d2d24 	.word	0x2d2d2d24
 8002478:	27          	.byte	0x27
 8002479:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800247a:	f7ff f995 	bl	80017a8 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800247e:	6862      	ldr	r2, [r4, #4]
 8002480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002484:	0856      	lsrs	r6, r2, #1
 8002486:	2700      	movs	r7, #0
 8002488:	fbe1 6700 	umlal	r6, r7, r1, r0
 800248c:	2300      	movs	r3, #0
 800248e:	4630      	mov	r0, r6
 8002490:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002492:	f7fe fa89 	bl	80009a8 <__aeabi_uldivmod>
            break;
 8002496:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002498:	4b58      	ldr	r3, [pc, #352]	; (80025fc <UART_SetConfig+0x2f8>)
 800249a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800249e:	4299      	cmp	r1, r3
 80024a0:	d8d9      	bhi.n	8002456 <UART_SetConfig+0x152>
          huart->Instance->BRR = usartdiv;
 80024a2:	6823      	ldr	r3, [r4, #0]
 80024a4:	60d8      	str	r0, [r3, #12]
 80024a6:	e7d7      	b.n	8002458 <UART_SetConfig+0x154>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80024a8:	4855      	ldr	r0, [pc, #340]	; (8002600 <UART_SetConfig+0x2fc>)
 80024aa:	0855      	lsrs	r5, r2, #1
 80024ac:	2300      	movs	r3, #0
 80024ae:	2100      	movs	r1, #0
 80024b0:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80024b2:	f141 0100 	adc.w	r1, r1, #0
 80024b6:	e7ec      	b.n	8002492 <UART_SetConfig+0x18e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80024b8:	f7fe fe18 	bl	80010ec <HAL_RCC_GetSysClockFreq>
 80024bc:	e7df      	b.n	800247e <UART_SetConfig+0x17a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80024be:	0850      	lsrs	r0, r2, #1
 80024c0:	2100      	movs	r1, #0
 80024c2:	2300      	movs	r3, #0
 80024c4:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80024c8:	e7f3      	b.n	80024b2 <UART_SetConfig+0x1ae>
            ret = HAL_ERROR;
 80024ca:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80024cc:	2000      	movs	r0, #0
 80024ce:	e7e3      	b.n	8002498 <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024d0:	f7ff f97a 	bl	80017c8 <HAL_RCC_GetPCLK2Freq>
 80024d4:	e04b      	b.n	800256e <UART_SetConfig+0x26a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80024d6:	f7ff f967 	bl	80017a8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80024da:	6862      	ldr	r2, [r4, #4]
 80024dc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80024e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80024e4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80024e6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024e8:	f1a3 0010 	sub.w	r0, r3, #16
 80024ec:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80024f0:	4288      	cmp	r0, r1
 80024f2:	d8b0      	bhi.n	8002456 <UART_SetConfig+0x152>
      huart->Instance->BRR = usartdiv;
 80024f4:	6821      	ldr	r1, [r4, #0]
 80024f6:	60cb      	str	r3, [r1, #12]
 80024f8:	e7ae      	b.n	8002458 <UART_SetConfig+0x154>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024fa:	f7ff f965 	bl	80017c8 <HAL_RCC_GetPCLK2Freq>
 80024fe:	e7ec      	b.n	80024da <UART_SetConfig+0x1d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002500:	6860      	ldr	r0, [r4, #4]
 8002502:	0843      	lsrs	r3, r0, #1
 8002504:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002508:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800250c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002510:	e7e8      	b.n	80024e4 <UART_SetConfig+0x1e0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002512:	f7fe fdeb 	bl	80010ec <HAL_RCC_GetSysClockFreq>
 8002516:	e7e0      	b.n	80024da <UART_SetConfig+0x1d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002518:	6860      	ldr	r0, [r4, #4]
 800251a:	0843      	lsrs	r3, r0, #1
 800251c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002520:	e7f4      	b.n	800250c <UART_SetConfig+0x208>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002522:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <UART_SetConfig+0x2d8>)
 8002524:	429a      	cmp	r2, r3
 8002526:	d08f      	beq.n	8002448 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002528:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800252c:	d1e8      	bne.n	8002500 <UART_SetConfig+0x1fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800252e:	6860      	ldr	r0, [r4, #4]
 8002530:	0843      	lsrs	r3, r0, #1
 8002532:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002536:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800253a:	fbb3 f3f0 	udiv	r3, r3, r0
 800253e:	e01c      	b.n	800257a <UART_SetConfig+0x276>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002540:	4b26      	ldr	r3, [pc, #152]	; (80025dc <UART_SetConfig+0x2d8>)
 8002542:	429a      	cmp	r2, r3
 8002544:	d10e      	bne.n	8002564 <UART_SetConfig+0x260>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002546:	f7ff f92f 	bl	80017a8 <HAL_RCC_GetPCLK1Freq>
        break;
 800254a:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 800254c:	2800      	cmp	r0, #0
 800254e:	f47f af7d 	bne.w	800244c <UART_SetConfig+0x148>
 8002552:	4602      	mov	r2, r0
 8002554:	e780      	b.n	8002458 <UART_SetConfig+0x154>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002556:	4b21      	ldr	r3, [pc, #132]	; (80025dc <UART_SetConfig+0x2d8>)
 8002558:	429a      	cmp	r2, r3
 800255a:	d11f      	bne.n	800259c <UART_SetConfig+0x298>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800255c:	f7fe fdc6 	bl	80010ec <HAL_RCC_GetSysClockFreq>
        break;
 8002560:	2304      	movs	r3, #4
 8002562:	e7f3      	b.n	800254c <UART_SetConfig+0x248>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002564:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002568:	d1b5      	bne.n	80024d6 <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800256a:	f7ff f91d 	bl	80017a8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800256e:	6861      	ldr	r1, [r4, #4]
 8002570:	084a      	lsrs	r2, r1, #1
 8002572:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002576:	fbb3 f3f1 	udiv	r3, r3, r1
 800257a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800257c:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800257e:	f1a3 0010 	sub.w	r0, r3, #16
 8002582:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002586:	4288      	cmp	r0, r1
 8002588:	f63f af65 	bhi.w	8002456 <UART_SetConfig+0x152>
      brrtemp = usartdiv & 0xFFF0U;
 800258c:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002590:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002592:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002596:	430b      	orrs	r3, r1
 8002598:	60c3      	str	r3, [r0, #12]
 800259a:	e75d      	b.n	8002458 <UART_SetConfig+0x154>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800259c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80025a0:	d1b7      	bne.n	8002512 <UART_SetConfig+0x20e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025a2:	f7fe fda3 	bl	80010ec <HAL_RCC_GetSysClockFreq>
 80025a6:	e7e2      	b.n	800256e <UART_SetConfig+0x26a>
    switch (clocksource)
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	f63f af54 	bhi.w	8002456 <UART_SetConfig+0x152>
 80025ae:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <UART_SetConfig+0x2b0>)
 80025b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b4:	080024d7 	.word	0x080024d7
 80025b8:	080024fb 	.word	0x080024fb
 80025bc:	08002501 	.word	0x08002501
 80025c0:	08002457 	.word	0x08002457
 80025c4:	08002513 	.word	0x08002513
 80025c8:	08002457 	.word	0x08002457
 80025cc:	08002457 	.word	0x08002457
 80025d0:	08002457 	.word	0x08002457
 80025d4:	08002519 	.word	0x08002519
 80025d8:	efff69f3 	.word	0xefff69f3
 80025dc:	40008000 	.word	0x40008000
 80025e0:	40013800 	.word	0x40013800
 80025e4:	080037e0 	.word	0x080037e0
 80025e8:	40004400 	.word	0x40004400
 80025ec:	080037e4 	.word	0x080037e4
 80025f0:	40004800 	.word	0x40004800
 80025f4:	40004c00 	.word	0x40004c00
 80025f8:	00f42400 	.word	0x00f42400
 80025fc:	000ffcff 	.word	0x000ffcff
 8002600:	f4240000 	.word	0xf4240000

08002604 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002604:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002606:	07da      	lsls	r2, r3, #31
{
 8002608:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800260a:	d506      	bpl.n	800261a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800260c:	6801      	ldr	r1, [r0, #0]
 800260e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002610:	684a      	ldr	r2, [r1, #4]
 8002612:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002616:	4322      	orrs	r2, r4
 8002618:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800261a:	079c      	lsls	r4, r3, #30
 800261c:	d506      	bpl.n	800262c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800261e:	6801      	ldr	r1, [r0, #0]
 8002620:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002622:	684a      	ldr	r2, [r1, #4]
 8002624:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002628:	4322      	orrs	r2, r4
 800262a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800262c:	0759      	lsls	r1, r3, #29
 800262e:	d506      	bpl.n	800263e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002630:	6801      	ldr	r1, [r0, #0]
 8002632:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002634:	684a      	ldr	r2, [r1, #4]
 8002636:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800263a:	4322      	orrs	r2, r4
 800263c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800263e:	071a      	lsls	r2, r3, #28
 8002640:	d506      	bpl.n	8002650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002642:	6801      	ldr	r1, [r0, #0]
 8002644:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002646:	684a      	ldr	r2, [r1, #4]
 8002648:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800264c:	4322      	orrs	r2, r4
 800264e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002650:	06dc      	lsls	r4, r3, #27
 8002652:	d506      	bpl.n	8002662 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002654:	6801      	ldr	r1, [r0, #0]
 8002656:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002658:	688a      	ldr	r2, [r1, #8]
 800265a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800265e:	4322      	orrs	r2, r4
 8002660:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002662:	0699      	lsls	r1, r3, #26
 8002664:	d506      	bpl.n	8002674 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002666:	6801      	ldr	r1, [r0, #0]
 8002668:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800266a:	688a      	ldr	r2, [r1, #8]
 800266c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002670:	4322      	orrs	r2, r4
 8002672:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002674:	065a      	lsls	r2, r3, #25
 8002676:	d50f      	bpl.n	8002698 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002678:	6801      	ldr	r1, [r0, #0]
 800267a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800267c:	684a      	ldr	r2, [r1, #4]
 800267e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002682:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002684:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002688:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800268a:	d105      	bne.n	8002698 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800268c:	684a      	ldr	r2, [r1, #4]
 800268e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002690:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002694:	4322      	orrs	r2, r4
 8002696:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002698:	061b      	lsls	r3, r3, #24
 800269a:	d506      	bpl.n	80026aa <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800269c:	6802      	ldr	r2, [r0, #0]
 800269e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80026a0:	6853      	ldr	r3, [r2, #4]
 80026a2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80026a6:	430b      	orrs	r3, r1
 80026a8:	6053      	str	r3, [r2, #4]
 80026aa:	bd10      	pop	{r4, pc}

080026ac <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026b0:	9d06      	ldr	r5, [sp, #24]
 80026b2:	4604      	mov	r4, r0
 80026b4:	460f      	mov	r7, r1
 80026b6:	4616      	mov	r6, r2
 80026b8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ba:	6821      	ldr	r1, [r4, #0]
 80026bc:	69ca      	ldr	r2, [r1, #28]
 80026be:	ea37 0302 	bics.w	r3, r7, r2
 80026c2:	bf0c      	ite	eq
 80026c4:	2201      	moveq	r2, #1
 80026c6:	2200      	movne	r2, #0
 80026c8:	42b2      	cmp	r2, r6
 80026ca:	d002      	beq.n	80026d2 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80026cc:	2000      	movs	r0, #0
}
 80026ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80026d2:	1c6b      	adds	r3, r5, #1
 80026d4:	d0f2      	beq.n	80026bc <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026d6:	b99d      	cbnz	r5, 8002700 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80026ea:	2320      	movs	r3, #32
 80026ec:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80026f0:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80026f4:	2300      	movs	r3, #0
 80026f6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80026fa:	2003      	movs	r0, #3
 80026fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002700:	f001 f80e 	bl	8003720 <HAL_GetTick>
 8002704:	eba0 0008 	sub.w	r0, r0, r8
 8002708:	4285      	cmp	r5, r0
 800270a:	d2d6      	bcs.n	80026ba <UART_WaitOnFlagUntilTimeout+0xe>
 800270c:	e7e4      	b.n	80026d8 <UART_WaitOnFlagUntilTimeout+0x2c>

0800270e <UART_CheckIdleState>:
{
 800270e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002710:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002712:	2600      	movs	r6, #0
 8002714:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8002716:	f001 f803 	bl	8003720 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800271a:	6823      	ldr	r3, [r4, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002720:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002722:	d417      	bmi.n	8002754 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	075b      	lsls	r3, r3, #29
 800272a:	d50a      	bpl.n	8002742 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800272c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	2200      	movs	r2, #0
 8002734:	462b      	mov	r3, r5
 8002736:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800273a:	4620      	mov	r0, r4
 800273c:	f7ff ffb6 	bl	80026ac <UART_WaitOnFlagUntilTimeout>
 8002740:	b9a0      	cbnz	r0, 800276c <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8002742:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002744:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002746:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800274a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800274e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8002752:	e00c      	b.n	800276e <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	4632      	mov	r2, r6
 800275c:	4603      	mov	r3, r0
 800275e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002762:	4620      	mov	r0, r4
 8002764:	f7ff ffa2 	bl	80026ac <UART_WaitOnFlagUntilTimeout>
 8002768:	2800      	cmp	r0, #0
 800276a:	d0db      	beq.n	8002724 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800276c:	2003      	movs	r0, #3
}
 800276e:	b002      	add	sp, #8
 8002770:	bd70      	pop	{r4, r5, r6, pc}

08002772 <HAL_UART_Init>:
{
 8002772:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002774:	4604      	mov	r4, r0
 8002776:	b360      	cbz	r0, 80027d2 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002778:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800277c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002780:	b91b      	cbnz	r3, 800278a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002782:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002786:	f000 ff0b 	bl	80035a0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800278a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800278c:	2324      	movs	r3, #36	; 0x24
 800278e:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8002792:	6813      	ldr	r3, [r2, #0]
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800279a:	4620      	mov	r0, r4
 800279c:	f7ff fdb2 	bl	8002304 <UART_SetConfig>
 80027a0:	2801      	cmp	r0, #1
 80027a2:	d016      	beq.n	80027d2 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027a6:	b113      	cbz	r3, 80027ae <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80027a8:	4620      	mov	r0, r4
 80027aa:	f7ff ff2b 	bl	8002604 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027be:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80027c6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80027c8:	601a      	str	r2, [r3, #0]
}
 80027ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80027ce:	f7ff bf9e 	b.w	800270e <UART_CheckIdleState>
}
 80027d2:	2001      	movs	r0, #1
 80027d4:	bd10      	pop	{r4, pc}
	...

080027d8 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <SDMMC_GetCmdResp2+0x48>)
 80027da:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80027e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80027e8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80027ea:	f113 33ff 	adds.w	r3, r3, #4294967295
 80027ee:	d313      	bcc.n	8002818 <SDMMC_GetCmdResp2+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80027f0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80027f2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80027f6:	d0f8      	beq.n	80027ea <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80027f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80027fa:	075b      	lsls	r3, r3, #29
 80027fc:	d503      	bpl.n	8002806 <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80027fe:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8002800:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8002802:	4618      	mov	r0, r3
 8002804:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8002806:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002808:	f013 0301 	ands.w	r3, r3, #1
 800280c:	d001      	beq.n	8002812 <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800280e:	2301      	movs	r3, #1
 8002810:	e7f6      	b.n	8002800 <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8002812:	22c5      	movs	r2, #197	; 0xc5
 8002814:	6382      	str	r2, [r0, #56]	; 0x38
 8002816:	e7f4      	b.n	8002802 <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8002818:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800281c:	e7f1      	b.n	8002802 <SDMMC_GetCmdResp2+0x2a>
 800281e:	bf00      	nop
 8002820:	200047ec 	.word	0x200047ec

08002824 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <SDMMC_GetCmdResp3+0x3c>)
 8002826:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002830:	f241 3388 	movw	r3, #5000	; 0x1388
 8002834:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8002836:	f113 33ff 	adds.w	r3, r3, #4294967295
 800283a:	d30d      	bcc.n	8002858 <SDMMC_GetCmdResp3+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800283c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800283e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002842:	d0f8      	beq.n	8002836 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8002844:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002846:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800284a:	bf15      	itete	ne
 800284c:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800284e:	22c5      	moveq	r2, #197	; 0xc5
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8002850:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8002852:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002854:	4618      	mov	r0, r3
 8002856:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002858:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	200047ec 	.word	0x200047ec

08002864 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002864:	4b43      	ldr	r3, [pc, #268]	; (8002974 <SDMMC_GetCmdResp1+0x110>)
{
 8002866:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 800286e:	fbb3 f3f4 	udiv	r3, r3, r4
 8002872:	435a      	muls	r2, r3
    if (count-- == 0U)
 8002874:	2a00      	cmp	r2, #0
 8002876:	d048      	beq.n	800290a <SDMMC_GetCmdResp1+0xa6>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8002878:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800287a:	f013 0f45 	tst.w	r3, #69	; 0x45
 800287e:	f102 32ff 	add.w	r2, r2, #4294967295
 8002882:	d0f7      	beq.n	8002874 <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8002884:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002886:	075b      	lsls	r3, r3, #29
 8002888:	d503      	bpl.n	8002892 <SDMMC_GetCmdResp1+0x2e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800288a:	2304      	movs	r3, #4
 800288c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800288e:	4618      	mov	r0, r3
 8002890:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8002892:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002894:	07dc      	lsls	r4, r3, #31
 8002896:	d503      	bpl.n	80028a0 <SDMMC_GetCmdResp1+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8002898:	2301      	movs	r3, #1
 800289a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800289c:	2001      	movs	r0, #1
 800289e:	bd10      	pop	{r4, pc}
  return (uint8_t)(SDMMCx->RESPCMD);
 80028a0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	4299      	cmp	r1, r3
 80028a6:	d1f9      	bne.n	800289c <SDMMC_GetCmdResp1+0x38>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80028a8:	23c5      	movs	r3, #197	; 0xc5
 80028aa:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 80028ac:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80028ae:	4832      	ldr	r0, [pc, #200]	; (8002978 <SDMMC_GetCmdResp1+0x114>)
 80028b0:	4018      	ands	r0, r3
 80028b2:	2800      	cmp	r0, #0
 80028b4:	d05c      	beq.n	8002970 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	db2a      	blt.n	8002910 <SDMMC_GetCmdResp1+0xac>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80028ba:	005a      	lsls	r2, r3, #1
 80028bc:	d42b      	bmi.n	8002916 <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80028be:	009c      	lsls	r4, r3, #2
 80028c0:	d42b      	bmi.n	800291a <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80028c2:	00d9      	lsls	r1, r3, #3
 80028c4:	d42b      	bmi.n	800291e <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80028c6:	011a      	lsls	r2, r3, #4
 80028c8:	d42c      	bmi.n	8002924 <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80028ca:	015c      	lsls	r4, r3, #5
 80028cc:	d42d      	bmi.n	800292a <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80028ce:	01d9      	lsls	r1, r3, #7
 80028d0:	d42e      	bmi.n	8002930 <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80028d2:	021a      	lsls	r2, r3, #8
 80028d4:	d42f      	bmi.n	8002936 <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80028d6:	025c      	lsls	r4, r3, #9
 80028d8:	d430      	bmi.n	800293c <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80028da:	0299      	lsls	r1, r3, #10
 80028dc:	d431      	bmi.n	8002942 <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80028de:	02da      	lsls	r2, r3, #11
 80028e0:	d432      	bmi.n	8002948 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80028e2:	035c      	lsls	r4, r3, #13
 80028e4:	d433      	bmi.n	800294e <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80028e6:	0399      	lsls	r1, r3, #14
 80028e8:	d434      	bmi.n	8002954 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80028ea:	03da      	lsls	r2, r3, #15
 80028ec:	d435      	bmi.n	800295a <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80028ee:	041c      	lsls	r4, r3, #16
 80028f0:	d436      	bmi.n	8002960 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80028f2:	0459      	lsls	r1, r3, #17
 80028f4:	d437      	bmi.n	8002966 <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80028f6:	049a      	lsls	r2, r3, #18
 80028f8:	d438      	bmi.n	800296c <SDMMC_GetCmdResp1+0x108>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80028fa:	f013 0f08 	tst.w	r3, #8
 80028fe:	bf14      	ite	ne
 8002900:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8002904:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8002908:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800290a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800290e:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002910:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002914:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002916:	2040      	movs	r0, #64	; 0x40
 8002918:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800291a:	2080      	movs	r0, #128	; 0x80
 800291c:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800291e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002922:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002924:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002928:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800292a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800292e:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002930:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002934:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002936:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800293a:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800293c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002940:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002942:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002946:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CC_ERR;
 8002948:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800294c:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800294e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002952:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002954:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002958:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800295a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800295e:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002960:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002964:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002966:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800296a:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ERASE_RESET;
 800296c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8002970:	bd10      	pop	{r4, pc}
 8002972:	bf00      	nop
 8002974:	200047ec 	.word	0x200047ec
 8002978:	fdffe008 	.word	0xfdffe008

0800297c <SDMMC_Init>:
{
 800297c:	b084      	sub	sp, #16
 800297e:	b510      	push	{r4, lr}
 8002980:	ac03      	add	r4, sp, #12
 8002982:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8002986:	9904      	ldr	r1, [sp, #16]
 8002988:	9b03      	ldr	r3, [sp, #12]
 800298a:	6842      	ldr	r2, [r0, #4]
 800298c:	430b      	orrs	r3, r1
 800298e:	9905      	ldr	r1, [sp, #20]
 8002990:	430b      	orrs	r3, r1
 8002992:	9906      	ldr	r1, [sp, #24]
 8002994:	430b      	orrs	r3, r1
 8002996:	9907      	ldr	r1, [sp, #28]
 8002998:	430b      	orrs	r3, r1
 800299a:	9908      	ldr	r1, [sp, #32]
}
 800299c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80029a0:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 80029a4:	430b      	orrs	r3, r1
 80029a6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80029aa:	4313      	orrs	r3, r2
 80029ac:	6043      	str	r3, [r0, #4]
}
 80029ae:	b004      	add	sp, #16
 80029b0:	2000      	movs	r0, #0
 80029b2:	4770      	bx	lr

080029b4 <SDMMC_PowerState_ON>:
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80029b4:	2303      	movs	r3, #3
 80029b6:	6003      	str	r3, [r0, #0]
}
 80029b8:	2000      	movs	r0, #0
 80029ba:	4770      	bx	lr

080029bc <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80029bc:	6800      	ldr	r0, [r0, #0]
}
 80029be:	f000 0003 	and.w	r0, r0, #3
 80029c2:	4770      	bx	lr

080029c4 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 80029c4:	680b      	ldr	r3, [r1, #0]
 80029c6:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80029c8:	68c3      	ldr	r3, [r0, #12]
 80029ca:	684a      	ldr	r2, [r1, #4]
 80029cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80029d0:	f023 030f 	bic.w	r3, r3, #15
 80029d4:	4313      	orrs	r3, r2
 80029d6:	688a      	ldr	r2, [r1, #8]
 80029d8:	4313      	orrs	r3, r2
 80029da:	68ca      	ldr	r2, [r1, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	690a      	ldr	r2, [r1, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60c3      	str	r3, [r0, #12]
}
 80029e4:	2000      	movs	r0, #0
 80029e6:	4770      	bx	lr

080029e8 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80029e8:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 80029ea:	5840      	ldr	r0, [r0, r1]
}  
 80029ec:	4770      	bx	lr

080029ee <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 80029ee:	680b      	ldr	r3, [r1, #0]
 80029f0:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 80029f2:	684b      	ldr	r3, [r1, #4]
 80029f4:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 80029f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80029f8:	688a      	ldr	r2, [r1, #8]
 80029fa:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 80029fe:	4313      	orrs	r3, r2
 8002a00:	68ca      	ldr	r2, [r1, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	690a      	ldr	r2, [r1, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	694a      	ldr	r2, [r1, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8002a0e:	2000      	movs	r0, #0
 8002a10:	4770      	bx	lr

08002a12 <SDMMC_CmdBlockLength>:
{
 8002a12:	b530      	push	{r4, r5, lr}
 8002a14:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002a16:	2340      	movs	r3, #64	; 0x40
 8002a18:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002a1a:	2300      	movs	r3, #0
{
 8002a1c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8002a1e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002a20:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002a22:	9304      	str	r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002a24:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a2a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002a2c:	9402      	str	r4, [sp, #8]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002a2e:	f7ff ffc9 	bl	80029c4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4621      	mov	r1, r4
 8002a38:	4628      	mov	r0, r5
 8002a3a:	f7ff ff13 	bl	8002864 <SDMMC_GetCmdResp1>
}
 8002a3e:	b007      	add	sp, #28
 8002a40:	bd30      	pop	{r4, r5, pc}

08002a42 <SDMMC_CmdReadSingleBlock>:
{
 8002a42:	b530      	push	{r4, r5, lr}
 8002a44:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002a46:	2340      	movs	r3, #64	; 0x40
 8002a48:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002a4a:	2300      	movs	r3, #0
{
 8002a4c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002a4e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002a50:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002a52:	9304      	str	r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002a54:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a5a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002a5c:	9402      	str	r4, [sp, #8]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002a5e:	f7ff ffb1 	bl	80029c4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8002a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a66:	4621      	mov	r1, r4
 8002a68:	4628      	mov	r0, r5
 8002a6a:	f7ff fefb 	bl	8002864 <SDMMC_GetCmdResp1>
}
 8002a6e:	b007      	add	sp, #28
 8002a70:	bd30      	pop	{r4, r5, pc}

08002a72 <SDMMC_CmdReadMultiBlock>:
{
 8002a72:	b530      	push	{r4, r5, lr}
 8002a74:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002a76:	2340      	movs	r3, #64	; 0x40
 8002a78:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002a7a:	2300      	movs	r3, #0
{
 8002a7c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002a7e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002a80:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002a82:	9304      	str	r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002a84:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a8a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002a8c:	9402      	str	r4, [sp, #8]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002a8e:	f7ff ff99 	bl	80029c4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4621      	mov	r1, r4
 8002a98:	4628      	mov	r0, r5
 8002a9a:	f7ff fee3 	bl	8002864 <SDMMC_GetCmdResp1>
}
 8002a9e:	b007      	add	sp, #28
 8002aa0:	bd30      	pop	{r4, r5, pc}

08002aa2 <SDMMC_CmdWriteSingleBlock>:
{
 8002aa2:	b530      	push	{r4, r5, lr}
 8002aa4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002aa6:	2340      	movs	r3, #64	; 0x40
 8002aa8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002aaa:	2300      	movs	r3, #0
{
 8002aac:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002aae:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002ab0:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002ab2:	9304      	str	r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002ab4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aba:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002abc:	9402      	str	r4, [sp, #8]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002abe:	f7ff ff81 	bl	80029c4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4621      	mov	r1, r4
 8002ac8:	4628      	mov	r0, r5
 8002aca:	f7ff fecb 	bl	8002864 <SDMMC_GetCmdResp1>
}
 8002ace:	b007      	add	sp, #28
 8002ad0:	bd30      	pop	{r4, r5, pc}

08002ad2 <SDMMC_CmdWriteMultiBlock>:
{
 8002ad2:	b530      	push	{r4, r5, lr}
 8002ad4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002ad6:	2340      	movs	r3, #64	; 0x40
 8002ad8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002ada:	2300      	movs	r3, #0
{
 8002adc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002ade:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002ae0:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002ae2:	9304      	str	r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002ae4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aea:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002aec:	9402      	str	r4, [sp, #8]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002aee:	f7ff ff69 	bl	80029c4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4621      	mov	r1, r4
 8002af8:	4628      	mov	r0, r5
 8002afa:	f7ff feb3 	bl	8002864 <SDMMC_GetCmdResp1>
}
 8002afe:	b007      	add	sp, #28
 8002b00:	bd30      	pop	{r4, r5, pc}
	...

08002b04 <SDMMC_CmdStopTransfer>:
{
 8002b04:	b530      	push	{r4, r5, lr}
 8002b06:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 8002b08:	2300      	movs	r3, #0
{
 8002b0a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 8002b0c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002b0e:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002b10:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002b12:	9304      	str	r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002b14:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002b1a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002b1c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002b1e:	9402      	str	r4, [sp, #8]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002b20:	f7ff ff50 	bl	80029c4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8002b24:	4a03      	ldr	r2, [pc, #12]	; (8002b34 <SDMMC_CmdStopTransfer+0x30>)
 8002b26:	4621      	mov	r1, r4
 8002b28:	4628      	mov	r0, r5
 8002b2a:	f7ff fe9b 	bl	8002864 <SDMMC_GetCmdResp1>
}
 8002b2e:	b007      	add	sp, #28
 8002b30:	bd30      	pop	{r4, r5, pc}
 8002b32:	bf00      	nop
 8002b34:	05f5e100 	.word	0x05f5e100

08002b38 <SDMMC_CmdSelDesel>:
{
 8002b38:	b530      	push	{r4, r5, lr}
 8002b3a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002b3c:	2340      	movs	r3, #64	; 0x40
 8002b3e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002b40:	2300      	movs	r3, #0
{
 8002b42:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002b44:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002b46:	9304      	str	r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002b48:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002b4e:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002b50:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002b52:	9402      	str	r4, [sp, #8]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002b54:	f7ff ff36 	bl	80029c4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8002b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	4628      	mov	r0, r5
 8002b60:	f7ff fe80 	bl	8002864 <SDMMC_GetCmdResp1>
}
 8002b64:	b007      	add	sp, #28
 8002b66:	bd30      	pop	{r4, r5, pc}

08002b68 <SDMMC_CmdGoIdleState>:
{
 8002b68:	b510      	push	{r4, lr}
 8002b6a:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002b70:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8002b72:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002b74:	9304      	str	r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002b76:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b7c:	9305      	str	r3, [sp, #20]
{
 8002b7e:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002b80:	f7ff ff20 	bl	80029c4 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <SDMMC_CmdGoIdleState+0x4c>)
 8002b86:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b90:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b94:	4353      	muls	r3, r2
    if (count-- == 0U)
 8002b96:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002b9a:	d307      	bcc.n	8002bac <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8002b9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002b9e:	0612      	lsls	r2, r2, #24
 8002ba0:	d5f9      	bpl.n	8002b96 <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8002ba2:	23c5      	movs	r3, #197	; 0xc5
 8002ba4:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8002ba6:	2000      	movs	r0, #0
}
 8002ba8:	b006      	add	sp, #24
 8002baa:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8002bac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8002bb0:	e7fa      	b.n	8002ba8 <SDMMC_CmdGoIdleState+0x40>
 8002bb2:	bf00      	nop
 8002bb4:	200047ec 	.word	0x200047ec

08002bb8 <SDMMC_CmdOperCond>:
{
 8002bb8:	b510      	push	{r4, lr}
 8002bba:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002bbc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8002bc0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002bc6:	2340      	movs	r3, #64	; 0x40
 8002bc8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	9304      	str	r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002bce:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bd4:	9305      	str	r3, [sp, #20]
{
 8002bd6:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002bd8:	f7ff fef4 	bl	80029c4 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002bdc:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <SDMMC_CmdOperCond+0x74>)
 8002bde:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	fbb3 f2f2 	udiv	r2, r3, r2
 8002be8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bec:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8002bee:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002bf2:	d318      	bcc.n	8002c26 <SDMMC_CmdOperCond+0x6e>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8002bf4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002bf6:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002bfa:	d0f8      	beq.n	8002bee <SDMMC_CmdOperCond+0x36>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8002bfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bfe:	075b      	lsls	r3, r3, #29
 8002c00:	d503      	bpl.n	8002c0a <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8002c02:	2004      	movs	r0, #4
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8002c04:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8002c06:	b006      	add	sp, #24
 8002c08:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8002c0a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002c0c:	f012 0201 	ands.w	r2, r2, #1
 8002c10:	d001      	beq.n	8002c16 <SDMMC_CmdOperCond+0x5e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8002c12:	2001      	movs	r0, #1
 8002c14:	e7f6      	b.n	8002c04 <SDMMC_CmdOperCond+0x4c>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8002c16:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002c18:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8002c1c:	d0f3      	beq.n	8002c06 <SDMMC_CmdOperCond+0x4e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8002c1e:	2340      	movs	r3, #64	; 0x40
 8002c20:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002c22:	4610      	mov	r0, r2
 8002c24:	e7ef      	b.n	8002c06 <SDMMC_CmdOperCond+0x4e>
      return SDMMC_ERROR_TIMEOUT;
 8002c26:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002c2a:	e7ec      	b.n	8002c06 <SDMMC_CmdOperCond+0x4e>
 8002c2c:	200047ec 	.word	0x200047ec

08002c30 <SDMMC_CmdAppCommand>:
{
 8002c30:	b530      	push	{r4, r5, lr}
 8002c32:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002c34:	2340      	movs	r3, #64	; 0x40
 8002c36:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002c38:	2300      	movs	r3, #0
{
 8002c3a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002c3c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002c3e:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002c40:	9304      	str	r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002c42:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c48:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002c4a:	9402      	str	r4, [sp, #8]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002c4c:	f7ff feba 	bl	80029c4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8002c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c54:	4621      	mov	r1, r4
 8002c56:	4628      	mov	r0, r5
 8002c58:	f7ff fe04 	bl	8002864 <SDMMC_GetCmdResp1>
}
 8002c5c:	b007      	add	sp, #28
 8002c5e:	bd30      	pop	{r4, r5, pc}

08002c60 <SDMMC_CmdAppOperCommand>:
{
 8002c60:	b510      	push	{r4, lr}
 8002c62:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002c64:	2329      	movs	r3, #41	; 0x29
 8002c66:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002c68:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002c6c:	2340      	movs	r3, #64	; 0x40
 8002c6e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002c70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002c74:	2300      	movs	r3, #0
{
 8002c76:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002c78:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002c7a:	9304      	str	r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002c7c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c82:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002c84:	f7ff fe9e 	bl	80029c4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f7ff fdcb 	bl	8002824 <SDMMC_GetCmdResp3>
}
 8002c8e:	b006      	add	sp, #24
 8002c90:	bd10      	pop	{r4, pc}

08002c92 <SDMMC_CmdSendCID>:
{
 8002c92:	b510      	push	{r4, lr}
 8002c94:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 8002c96:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002c98:	2202      	movs	r2, #2
{
 8002c9a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8002c9c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002c9e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002ca0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8002ca2:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002ca8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8002caa:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002cac:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002cae:	f7ff fe89 	bl	80029c4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f7ff fd90 	bl	80027d8 <SDMMC_GetCmdResp2>
}
 8002cb8:	b006      	add	sp, #24
 8002cba:	bd10      	pop	{r4, pc}

08002cbc <SDMMC_CmdSendCSD>:
{
 8002cbc:	b510      	push	{r4, lr}
 8002cbe:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002cc0:	2309      	movs	r3, #9
 8002cc2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8002cc4:	23c0      	movs	r3, #192	; 0xc0
 8002cc6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002cc8:	2300      	movs	r3, #0
{
 8002cca:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8002ccc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002cce:	9304      	str	r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002cd0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cd6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002cd8:	f7ff fe74 	bl	80029c4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f7ff fd7b 	bl	80027d8 <SDMMC_GetCmdResp2>
}
 8002ce2:	b006      	add	sp, #24
 8002ce4:	bd10      	pop	{r4, pc}
	...

08002ce8 <SDMMC_CmdSetRelAdd>:
{
 8002ce8:	b530      	push	{r4, r5, lr}
 8002cea:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 8002cec:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002cee:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0;
 8002cf0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002cf2:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002cf4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002cf6:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 8002cfc:	460d      	mov	r5, r1
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002cfe:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002d00:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002d02:	9305      	str	r3, [sp, #20]
{
 8002d04:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002d06:	f7ff fe5d 	bl	80029c4 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <SDMMC_CmdSetRelAdd+0x98>)
 8002d0c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	fbb3 f2f2 	udiv	r2, r3, r2
 8002d16:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d1a:	4353      	muls	r3, r2
    if (count-- == 0U)
 8002d1c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002d20:	d326      	bcc.n	8002d70 <SDMMC_CmdSetRelAdd+0x88>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8002d22:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002d24:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002d28:	d0f8      	beq.n	8002d1c <SDMMC_CmdSetRelAdd+0x34>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8002d2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d2c:	0758      	lsls	r0, r3, #29
 8002d2e:	d503      	bpl.n	8002d38 <SDMMC_CmdSetRelAdd+0x50>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8002d30:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8002d32:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8002d34:	b007      	add	sp, #28
 8002d36:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8002d38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d3a:	07d9      	lsls	r1, r3, #31
 8002d3c:	d501      	bpl.n	8002d42 <SDMMC_CmdSetRelAdd+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8002d3e:	2001      	movs	r0, #1
 8002d40:	e7f7      	b.n	8002d32 <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDMMCx->RESPCMD);
 8002d42:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d115      	bne.n	8002d76 <SDMMC_CmdSetRelAdd+0x8e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8002d4a:	23c5      	movs	r3, #197	; 0xc5
 8002d4c:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8002d4e:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8002d50:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8002d54:	d102      	bne.n	8002d5c <SDMMC_CmdSetRelAdd+0x74>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8002d56:	0c1b      	lsrs	r3, r3, #16
 8002d58:	802b      	strh	r3, [r5, #0]
 8002d5a:	e7eb      	b.n	8002d34 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8002d5c:	045a      	lsls	r2, r3, #17
 8002d5e:	d40c      	bmi.n	8002d7a <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002d60:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002d64:	bf14      	ite	ne
 8002d66:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8002d6a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8002d6e:	e7e1      	b.n	8002d34 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 8002d70:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002d74:	e7de      	b.n	8002d34 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002d76:	2001      	movs	r0, #1
 8002d78:	e7dc      	b.n	8002d34 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002d7a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d7e:	e7d9      	b.n	8002d34 <SDMMC_CmdSetRelAdd+0x4c>
 8002d80:	200047ec 	.word	0x200047ec

08002d84 <SDMMC_CmdSendStatus>:
{
 8002d84:	b530      	push	{r4, r5, lr}
 8002d86:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002d88:	2340      	movs	r3, #64	; 0x40
 8002d8a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002d8c:	2300      	movs	r3, #0
{
 8002d8e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8002d90:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002d92:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002d94:	9304      	str	r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002d96:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d9c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002d9e:	9402      	str	r4, [sp, #8]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002da0:	f7ff fe10 	bl	80029c4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4621      	mov	r1, r4
 8002daa:	4628      	mov	r0, r5
 8002dac:	f7ff fd5a 	bl	8002864 <SDMMC_GetCmdResp1>
}
 8002db0:	b007      	add	sp, #28
 8002db2:	bd30      	pop	{r4, r5, pc}

08002db4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8002db4:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <FATFS_LinkDriverEx+0x40>)
 8002db8:	7a5d      	ldrb	r5, [r3, #9]
 8002dba:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8002dbe:	b9b5      	cbnz	r5, 8002dee <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8002dc0:	7a5d      	ldrb	r5, [r3, #9]
 8002dc2:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8002dc4:	7a5d      	ldrb	r5, [r3, #9]
 8002dc6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8002dca:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8002dcc:	7a58      	ldrb	r0, [r3, #9]
 8002dce:	4418      	add	r0, r3
 8002dd0:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8002dd2:	7a5a      	ldrb	r2, [r3, #9]
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	1c50      	adds	r0, r2, #1
 8002dd8:	b2c0      	uxtb	r0, r0
 8002dda:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8002ddc:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8002dde:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8002de0:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8002de2:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8002de4:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8002de6:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8002de8:	70cc      	strb	r4, [r1, #3]
 8002dea:	4620      	mov	r0, r4
 8002dec:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8002dee:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8002df0:	bd30      	pop	{r4, r5, pc}
 8002df2:	bf00      	nop
 8002df4:	2000480c 	.word	0x2000480c

08002df8 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f7ff bfdb 	b.w	8002db4 <FATFS_LinkDriverEx>
	...

08002e00 <SN_Init>:
#include "SN76489.h"

void SN_Init(GPIO_TypeDef * port)
{
	_port = port;
 8002e00:	4b01      	ldr	r3, [pc, #4]	; (8002e08 <SN_Init+0x8>)
 8002e02:	6018      	str	r0, [r3, #0]
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20004870 	.word	0x20004870

08002e0c <SN_WriteDataPins>:
}

void SN_WriteDataPins(char data)
{
	//WE = PA09:0x100
	GPIOA->ODR |= 0x100; //WE HIGH
 8002e0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
{
 8002e10:	b570      	push	{r4, r5, r6, lr}
	GPIOA->ODR |= 0x100; //WE HIGH
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e18:	615a      	str	r2, [r3, #20]

	Databus.PORT = _port->ODR;
 8002e1a:	4a10      	ldr	r2, [pc, #64]	; (8002e5c <SN_WriteDataPins+0x50>)
 8002e1c:	6811      	ldr	r1, [r2, #0]
 8002e1e:	4a10      	ldr	r2, [pc, #64]	; (8002e60 <SN_WriteDataPins+0x54>)
 8002e20:	694c      	ldr	r4, [r1, #20]
 8002e22:	6014      	str	r4, [r2, #0]
	Databus.bytes[0] = data;
 8002e24:	7010      	strb	r0, [r2, #0]
	_port->ODR = Databus.PORT;
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	614a      	str	r2, [r1, #20]

	GPIOA->ODR &= ~(0x100); //WE HIGH
 8002e2a:	695a      	ldr	r2, [r3, #20]
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay(__IO uint32_t micros) {
#if !defined(STM32F0xx)
	uint32_t start = DWT->CYCCNT;
 8002e2c:	4c0d      	ldr	r4, [pc, #52]	; (8002e64 <SN_WriteDataPins+0x58>)
 8002e2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e32:	615a      	str	r2, [r3, #20]
 8002e34:	6866      	ldr	r6, [r4, #4]
	
	/* Go to number of cycles for system */
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002e36:	f7fe fcb1 	bl	800179c <HAL_RCC_GetHCLKFreq>
 8002e3a:	250e      	movs	r5, #14
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <SN_WriteDataPins+0x5c>)
 8002e3e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e42:	4345      	muls	r5, r0
	
	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
 8002e44:	6863      	ldr	r3, [r4, #4]
 8002e46:	1b9b      	subs	r3, r3, r6
 8002e48:	42ab      	cmp	r3, r5
 8002e4a:	d3fb      	bcc.n	8002e44 <SN_WriteDataPins+0x38>
	Delay(14); //Delay 14 microseconds
	GPIOA->ODR |= 0x100; //WE HIGH
 8002e4c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e50:	6953      	ldr	r3, [r2, #20]
 8002e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e56:	6153      	str	r3, [r2, #20]
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20004870 	.word	0x20004870
 8002e60:	20004874 	.word	0x20004874
 8002e64:	e0001000 	.word	0xe0001000
 8002e68:	000f4240 	.word	0x000f4240

08002e6c <SN_Reset>:
}

void SN_Reset()
{
 8002e6c:	b508      	push	{r3, lr}
	SN_WriteDataPins(0x9F);
 8002e6e:	209f      	movs	r0, #159	; 0x9f
 8002e70:	f7ff ffcc 	bl	8002e0c <SN_WriteDataPins>
	SN_WriteDataPins(0xBF);
 8002e74:	20bf      	movs	r0, #191	; 0xbf
 8002e76:	f7ff ffc9 	bl	8002e0c <SN_WriteDataPins>
	SN_WriteDataPins(0xDF);
 8002e7a:	20df      	movs	r0, #223	; 0xdf
 8002e7c:	f7ff ffc6 	bl	8002e0c <SN_WriteDataPins>
	SN_WriteDataPins(0xFF);
 8002e80:	20ff      	movs	r0, #255	; 0xff
}
 8002e82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SN_WriteDataPins(0xFF);
 8002e86:	f7ff bfc1 	b.w	8002e0c <SN_WriteDataPins>
	...

08002e8c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8002e8c:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8002e94:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d105      	bne.n	8002ea8 <BSP_SD_Init+0x1c>
  sd_state = HAL_SD_Init(&hsd1);
 8002e9c:	4803      	ldr	r0, [pc, #12]	; (8002eac <BSP_SD_Init+0x20>)
 8002e9e:	f7ff f9c2 	bl	8002226 <HAL_SD_Init>
}
 8002ea2:	b003      	add	sp, #12
 8002ea4:	f85d fb04 	ldr.w	pc, [sp], #4
    return MSD_ERROR_SD_NOT_PRESENT;
 8002ea8:	2002      	movs	r0, #2
 8002eaa:	e7fa      	b.n	8002ea2 <BSP_SD_Init+0x16>
 8002eac:	20004ce0 	.word	0x20004ce0

08002eb0 <BSP_SD_ReadBlocks_DMA>:
{
 8002eb0:	b508      	push	{r3, lr}
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	460a      	mov	r2, r1
 8002eb6:	4601      	mov	r1, r0
 8002eb8:	4803      	ldr	r0, [pc, #12]	; (8002ec8 <BSP_SD_ReadBlocks_DMA+0x18>)
 8002eba:	f7fe feb5 	bl	8001c28 <HAL_SD_ReadBlocks_DMA>
}
 8002ebe:	3000      	adds	r0, #0
 8002ec0:	bf18      	it	ne
 8002ec2:	2001      	movne	r0, #1
 8002ec4:	bd08      	pop	{r3, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20004ce0 	.word	0x20004ce0

08002ecc <BSP_SD_WriteBlocks_DMA>:
{
 8002ecc:	b508      	push	{r3, lr}
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	460a      	mov	r2, r1
 8002ed2:	4601      	mov	r1, r0
 8002ed4:	4803      	ldr	r0, [pc, #12]	; (8002ee4 <BSP_SD_WriteBlocks_DMA+0x18>)
 8002ed6:	f7fe ff3b 	bl	8001d50 <HAL_SD_WriteBlocks_DMA>
}
 8002eda:	3000      	adds	r0, #0
 8002edc:	bf18      	it	ne
 8002ede:	2001      	movne	r0, #1
 8002ee0:	bd08      	pop	{r3, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20004ce0 	.word	0x20004ce0

08002ee8 <BSP_SD_GetCardState>:
{
 8002ee8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8002eea:	4803      	ldr	r0, [pc, #12]	; (8002ef8 <BSP_SD_GetCardState+0x10>)
 8002eec:	f7ff f9c8 	bl	8002280 <HAL_SD_GetCardState>
}
 8002ef0:	3804      	subs	r0, #4
 8002ef2:	bf18      	it	ne
 8002ef4:	2001      	movne	r0, #1
 8002ef6:	bd08      	pop	{r3, pc}
 8002ef8:	20004ce0 	.word	0x20004ce0

08002efc <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8002efc:	4601      	mov	r1, r0
 8002efe:	4801      	ldr	r0, [pc, #4]	; (8002f04 <BSP_SD_GetCardInfo+0x8>)
 8002f00:	f7ff b9ac 	b.w	800225c <HAL_SD_GetCardInfo>
 8002f04:	20004ce0 	.word	0x20004ce0

08002f08 <BSP_SD_ReadCpltCallback>:
{
 8002f08:	4770      	bx	lr

08002f0a <HAL_SD_RxCpltCallback>:
{
 8002f0a:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8002f0c:	f7ff fffc 	bl	8002f08 <BSP_SD_ReadCpltCallback>
 8002f10:	bd08      	pop	{r3, pc}
	...

08002f14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8002f14:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8002f16:	4903      	ldr	r1, [pc, #12]	; (8002f24 <MX_FATFS_Init+0x10>)
 8002f18:	4803      	ldr	r0, [pc, #12]	; (8002f28 <MX_FATFS_Init+0x14>)
 8002f1a:	f7ff ff6d 	bl	8002df8 <FATFS_LinkDriver>
 8002f1e:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <MX_FATFS_Init+0x18>)
 8002f20:	7018      	strb	r0, [r3, #0]
 8002f22:	bd08      	pop	{r3, pc}
 8002f24:	20004879 	.word	0x20004879
 8002f28:	080037f4 	.word	0x080037f4
 8002f2c:	20004878 	.word	0x20004878

08002f30 <Reset>:
	uint32_t output = (v0 + (v1 << 8) + (v2 << 16) + (v3 << 24));
	return output;
}

void Reset()
{
 8002f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f34:	ed2d 8b04 	vpush	{d8-d9}
	SN_Reset();
 8002f38:	f7ff ff98 	bl	8002e6c <SN_Reset>
	pos = 0;
 8002f3c:	4a2c      	ldr	r2, [pc, #176]	; (8002ff0 <Reset+0xc0>)
	lastWaitData61 = 0;
	cachedWaitTime61 = 0;
	pauseTime = 0;
	startTime = 0;
	cmd = 0;
	singleSampleWait = ((1000.0 / (sampleRate/(float)1))*1000);
 8002f3e:	492d      	ldr	r1, [pc, #180]	; (8002ff4 <Reset+0xc4>)
 8002f40:	4d2d      	ldr	r5, [pc, #180]	; (8002ff8 <Reset+0xc8>)
 8002f42:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8003024 <Reset+0xf4>
		preCalced8nDelays[i] = 0;
		preCalced7nDelays[i] = 1;
	  }
	  else
	  {
		preCalced8nDelays[i] = ((1000.0 / (sampleRate/(float)i))*1000);
 8002f46:	eddf 8a2d 	vldr	s17, [pc, #180]	; 8002ffc <Reset+0xcc>
 8002f4a:	4f2d      	ldr	r7, [pc, #180]	; (8003000 <Reset+0xd0>)
	pos = 0;
 8002f4c:	2400      	movs	r4, #0
 8002f4e:	6014      	str	r4, [r2, #0]
	cmd = 0;
 8002f50:	4a2c      	ldr	r2, [pc, #176]	; (8003004 <Reset+0xd4>)
 8002f52:	7014      	strb	r4, [r2, #0]
	waitSamples = 0;
 8002f54:	4a2c      	ldr	r2, [pc, #176]	; (8003008 <Reset+0xd8>)
 8002f56:	6014      	str	r4, [r2, #0]
	loopOffset = 0;
 8002f58:	4a2c      	ldr	r2, [pc, #176]	; (800300c <Reset+0xdc>)
 8002f5a:	6014      	str	r4, [r2, #0]
	lastWaitData61 = 0;
 8002f5c:	4a2c      	ldr	r2, [pc, #176]	; (8003010 <Reset+0xe0>)
 8002f5e:	6014      	str	r4, [r2, #0]
	cachedWaitTime61 = 0;
 8002f60:	4a2c      	ldr	r2, [pc, #176]	; (8003014 <Reset+0xe4>)
 8002f62:	6014      	str	r4, [r2, #0]
	pauseTime = 0;
 8002f64:	4a2c      	ldr	r2, [pc, #176]	; (8003018 <Reset+0xe8>)
 8002f66:	6014      	str	r4, [r2, #0]
	startTime = 0;
 8002f68:	4a2c      	ldr	r2, [pc, #176]	; (800301c <Reset+0xec>)
 8002f6a:	6014      	str	r4, [r2, #0]
	singleSampleWait = ((1000.0 / (sampleRate/(float)1))*1000);
 8002f6c:	4a2c      	ldr	r2, [pc, #176]	; (8003020 <Reset+0xf0>)
		preCalced8nDelays[i] = ((1000.0 / (sampleRate/(float)i))*1000);
 8002f6e:	2600      	movs	r6, #0
	singleSampleWait = ((1000.0 / (sampleRate/(float)1))*1000);
 8002f70:	6011      	str	r1, [r2, #0]
		preCalced7nDelays[i] = ((1000.0 / (sampleRate/(float)i+1))*1000);
 8002f72:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
		preCalced7nDelays[i] = 1;
 8002f76:	f04f 0901 	mov.w	r9, #1
	  if(i == 0)
 8002f7a:	b964      	cbnz	r4, 8002f96 <Reset+0x66>
		preCalced8nDelays[i] = 0;
 8002f7c:	602c      	str	r4, [r5, #0]
		preCalced7nDelays[i] = 1;
 8002f7e:	f8c8 9000 	str.w	r9, [r8]
	for(int i = 0; i<16; i++)
 8002f82:	3401      	adds	r4, #1
 8002f84:	2c10      	cmp	r4, #16
 8002f86:	d1f8      	bne.n	8002f7a <Reset+0x4a>
	  }
	}
	Delayms(200);
}
 8002f88:	ecbd 8b04 	vpop	{d8-d9}
 * @param  millis: Number of milliseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delayms(uint32_t millis) {
	/* Use HAL library for delay ms purpose */
	HAL_Delay(millis);
 8002f8c:	20c8      	movs	r0, #200	; 0xc8
 8002f8e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f92:	f000 bbad 	b.w	80036f0 <HAL_Delay>
		preCalced8nDelays[i] = ((1000.0 / (sampleRate/(float)i))*1000);
 8002f96:	ee07 4a90 	vmov	s15, r4
 8002f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f9e:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 8002fa2:	ee18 0a10 	vmov	r0, s16
 8002fa6:	f7fd fa79 	bl	800049c <__aeabi_f2d>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4630      	mov	r0, r6
 8002fb0:	4639      	mov	r1, r7
 8002fb2:	f7fd fbf1 	bl	8000798 <__aeabi_ddiv>
 8002fb6:	4632      	mov	r2, r6
 8002fb8:	463b      	mov	r3, r7
 8002fba:	f7fd fac3 	bl	8000544 <__aeabi_dmul>
 8002fbe:	f7fd fcd3 	bl	8000968 <__aeabi_d2uiz>
		preCalced7nDelays[i] = ((1000.0 / (sampleRate/(float)i+1))*1000);
 8002fc2:	ee78 7a09 	vadd.f32	s15, s16, s18
		preCalced8nDelays[i] = ((1000.0 / (sampleRate/(float)i))*1000);
 8002fc6:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
		preCalced7nDelays[i] = ((1000.0 / (sampleRate/(float)i+1))*1000);
 8002fca:	ee17 0a90 	vmov	r0, s15
 8002fce:	f7fd fa65 	bl	800049c <__aeabi_f2d>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4630      	mov	r0, r6
 8002fd8:	4639      	mov	r1, r7
 8002fda:	f7fd fbdd 	bl	8000798 <__aeabi_ddiv>
 8002fde:	4632      	mov	r2, r6
 8002fe0:	463b      	mov	r3, r7
 8002fe2:	f7fd faaf 	bl	8000544 <__aeabi_dmul>
 8002fe6:	f7fd fcbf 	bl	8000968 <__aeabi_d2uiz>
 8002fea:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
 8002fee:	e7c8      	b.n	8002f82 <Reset+0x52>
 8002ff0:	20004834 	.word	0x20004834
 8002ff4:	41b567e9 	.word	0x41b567e9
 8002ff8:	20004da4 	.word	0x20004da4
 8002ffc:	472c4400 	.word	0x472c4400
 8003000:	408f4000 	.word	0x408f4000
 8003004:	20004824 	.word	0x20004824
 8003008:	20004840 	.word	0x20004840
 800300c:	2000482c 	.word	0x2000482c
 8003010:	20004828 	.word	0x20004828
 8003014:	20004820 	.word	0x20004820
 8003018:	20004830 	.word	0x20004830
 800301c:	2000483c 	.word	0x2000483c
 8003020:	20004838 	.word	0x20004838
 8003024:	20004d64 	.word	0x20004d64

08003028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	b0b0      	sub	sp, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800302c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003030:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003032:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003034:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003036:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003038:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 10;
 800303a:	230a      	movs	r3, #10
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800303c:	2507      	movs	r5, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800303e:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003040:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003042:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003044:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003046:	9611      	str	r6, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003048:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800304a:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800304c:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800304e:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003050:	f7fe f8b4 	bl	80011bc <HAL_RCC_OscConfig>
 8003054:	b100      	cbz	r0, 8003058 <SystemClock_Config+0x30>
 8003056:	e7fe      	b.n	8003056 <SystemClock_Config+0x2e>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003058:	220f      	movs	r2, #15
 800305a:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800305c:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800305e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003060:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003062:	2104      	movs	r1, #4
 8003064:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003066:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800306a:	f7fe fb05 	bl	8001678 <HAL_RCC_ClockConfig>
 800306e:	b100      	cbz	r0, 8003072 <SystemClock_Config+0x4a>
 8003070:	e7fe      	b.n	8003070 <SystemClock_Config+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_SDMMC1;
 8003072:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <SystemClock_Config+0xac>)
 8003074:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8003076:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800307a:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800307c:	2308      	movs	r3, #8
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800307e:	901f      	str	r0, [sp, #124]	; 0x7c
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8003080:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003082:	951a      	str	r5, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003084:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8003088:	2504      	movs	r5, #4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800308a:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800308c:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800308e:	9618      	str	r6, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8003090:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003092:	941c      	str	r4, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003094:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003096:	f7fe fc33 	bl	8001900 <HAL_RCCEx_PeriphCLKConfig>
 800309a:	b100      	cbz	r0, 800309e <SystemClock_Config+0x76>
 800309c:	e7fe      	b.n	800309c <SystemClock_Config+0x74>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800309e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80030a2:	f7fd ffad 	bl	8001000 <HAL_PWREx_ControlVoltageScaling>
 80030a6:	4604      	mov	r4, r0
 80030a8:	b100      	cbz	r0, 80030ac <SystemClock_Config+0x84>
 80030aa:	e7fe      	b.n	80030aa <SystemClock_Config+0x82>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80030ac:	f7fe fb76 	bl	800179c <HAL_RCC_GetHCLKFreq>
 80030b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80030b8:	f7fd fe6a 	bl	8000d90 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80030bc:	4628      	mov	r0, r5
 80030be:	f7fd fe7d 	bl	8000dbc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80030c2:	4622      	mov	r2, r4
 80030c4:	4621      	mov	r1, r4
 80030c6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ca:	f7fd fe2d 	bl	8000d28 <HAL_NVIC_SetPriority>
}
 80030ce:	b030      	add	sp, #192	; 0xc0
 80030d0:	bd70      	pop	{r4, r5, r6, pc}
 80030d2:	bf00      	nop
 80030d4:	00080002 	.word	0x00080002

080030d8 <main>:
{
 80030d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	WAIT60TH = ((1000.0 / (sampleRate/(float)735))*1000);
 80030dc:	4e89      	ldr	r6, [pc, #548]	; (8003304 <main+0x22c>)
 80030de:	4b8a      	ldr	r3, [pc, #552]	; (8003308 <main+0x230>)
	WAIT50TH = ((1000.0 / (sampleRate/(float)882))*1000);
 80030e0:	4d8a      	ldr	r5, [pc, #552]	; (800330c <main+0x234>)
	WAIT60TH = ((1000.0 / (sampleRate/(float)735))*1000);
 80030e2:	6033      	str	r3, [r6, #0]
{
 80030e4:	b08d      	sub	sp, #52	; 0x34
	WAIT50TH = ((1000.0 / (sampleRate/(float)882))*1000);
 80030e6:	4b8a      	ldr	r3, [pc, #552]	; (8003310 <main+0x238>)
 80030e8:	602b      	str	r3, [r5, #0]
  HAL_Init();
 80030ea:	f7fd fdf9 	bl	8000ce0 <HAL_Init>
  SystemClock_Config();
 80030ee:	f7ff ff9b 	bl	8003028 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030f2:	4b88      	ldr	r3, [pc, #544]	; (8003314 <main+0x23c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80030f4:	4888      	ldr	r0, [pc, #544]	; (8003318 <main+0x240>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030f8:	f042 0204 	orr.w	r2, r2, #4
 80030fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80030fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003100:	f002 0204 	and.w	r2, r2, #4
 8003104:	9202      	str	r2, [sp, #8]
 8003106:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003108:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800310a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800310e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003110:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003112:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003116:	9203      	str	r2, [sp, #12]
 8003118:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800311a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800311c:	f042 0201 	orr.w	r2, r2, #1
 8003120:	64da      	str	r2, [r3, #76]	; 0x4c
 8003122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003124:	f002 0201 	and.w	r2, r2, #1
 8003128:	9204      	str	r2, [sp, #16]
 800312a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800312c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800312e:	f042 0208 	orr.w	r2, r2, #8
 8003132:	64da      	str	r2, [r3, #76]	; 0x4c
 8003134:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003136:	f002 0208 	and.w	r2, r2, #8
 800313a:	9205      	str	r2, [sp, #20]
 800313c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800313e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003140:	f042 0202 	orr.w	r2, r2, #2
 8003144:	64da      	str	r2, [r3, #76]	; 0x4c
 8003146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800314e:	2200      	movs	r2, #0
 8003150:	f240 21ff 	movw	r1, #767	; 0x2ff
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003154:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003156:	f7fd ff45 	bl	8000fe4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD4_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800315a:	2200      	movs	r2, #0
 800315c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8003160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003164:	f7fd ff3e 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 800316e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003170:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003172:	4b6a      	ldr	r3, [pc, #424]	; (800331c <main+0x244>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003174:	4868      	ldr	r0, [pc, #416]	; (8003318 <main+0x240>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003176:	9308      	str	r3, [sp, #32]
                           PC4 PC5 PC6 PC7 
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003178:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800317c:	f7fd fe70 	bl	8000e60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003180:	f240 23ff 	movw	r3, #767	; 0x2ff
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003184:	a907      	add	r1, sp, #28
 8003186:	4864      	ldr	r0, [pc, #400]	; (8003318 <main+0x240>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003188:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800318a:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003190:	f7fd fe66 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin PA9 */
  GPIO_InitStruct.Pin = LD4_Pin|GPIO_PIN_9;
 8003194:	f44f 7308 	mov.w	r3, #544	; 0x220
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003198:	a907      	add	r1, sp, #28
 800319a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD4_Pin|GPIO_PIN_9;
 800319e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a0:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a6:	f7fd fe5b 	bl	8000e60 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80031aa:	485d      	ldr	r0, [pc, #372]	; (8003320 <main+0x248>)
  huart2.Init.BaudRate = 115200;
 80031ac:	4a5d      	ldr	r2, [pc, #372]	; (8003324 <main+0x24c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031ae:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80031b0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80031b4:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031b8:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031ba:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031bc:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031be:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031c0:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031c2:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031c4:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031c6:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031c8:	f7ff fad3 	bl	8002772 <HAL_UART_Init>
 80031cc:	46b0      	mov	r8, r6
 80031ce:	46a9      	mov	r9, r5
 80031d0:	b100      	cbz	r0, 80031d4 <main+0xfc>
 80031d2:	e7fe      	b.n	80031d2 <main+0xfa>
  hsd1.Instance = SDMMC1;
 80031d4:	4b54      	ldr	r3, [pc, #336]	; (8003328 <main+0x250>)
 80031d6:	4a55      	ldr	r2, [pc, #340]	; (800332c <main+0x254>)
 80031d8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80031da:	6058      	str	r0, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80031dc:	6098      	str	r0, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80031de:	60d8      	str	r0, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80031e0:	6118      	str	r0, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80031e2:	6158      	str	r0, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80031e4:	6198      	str	r0, [r3, #24]
   pos = 0x40;
 80031e6:	4c52      	ldr	r4, [pc, #328]	; (8003330 <main+0x258>)
	   			  if(loopOffset == 0)
 80031e8:	f8df a168 	ldr.w	sl, [pc, #360]	; 8003354 <main+0x27c>
	   		      pauseTime = ((1000.0 / (sampleRate/(float)wait))*1000);
 80031ec:	4f51      	ldr	r7, [pc, #324]	; (8003334 <main+0x25c>)
  MX_FATFS_Init();
 80031ee:	f7ff fe91 	bl	8002f14 <MX_FATFS_Init>
  TM_DELAY_Init();
 80031f2:	f000 fa25 	bl	8003640 <TM_DELAY_Init>
   SN_Init(GPIOC);
 80031f6:	4848      	ldr	r0, [pc, #288]	; (8003318 <main+0x240>)
 80031f8:	f7ff fe02 	bl	8002e00 <SN_Init>
   Reset();
 80031fc:	f7ff fe98 	bl	8002f30 <Reset>
   pos = 0x40;
 8003200:	2340      	movs	r3, #64	; 0x40
 8003202:	6023      	str	r3, [r4, #0]
	   		      pauseTime = ((1000.0 / (sampleRate/(float)wait))*1000);
 8003204:	2600      	movs	r6, #0
	  cmd = song[pos++];
 8003206:	6822      	ldr	r2, [r4, #0]
 8003208:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8003358 <main+0x280>
 800320c:	484a      	ldr	r0, [pc, #296]	; (8003338 <main+0x260>)
 800320e:	f81b 3002 	ldrb.w	r3, [fp, r2]
 8003212:	7003      	strb	r3, [r0, #0]
 8003214:	1c51      	adds	r1, r2, #1
	   		  switch(cmd)
 8003216:	2b62      	cmp	r3, #98	; 0x62
	  cmd = song[pos++];
 8003218:	6021      	str	r1, [r4, #0]
 800321a:	4d48      	ldr	r5, [pc, #288]	; (800333c <main+0x264>)
	   		  switch(cmd)
 800321c:	d061      	beq.n	80032e2 <main+0x20a>
 800321e:	d817      	bhi.n	8003250 <main+0x178>
 8003220:	2b50      	cmp	r3, #80	; 0x50
 8003222:	d059      	beq.n	80032d8 <main+0x200>
 8003224:	2b61      	cmp	r3, #97	; 0x61
 8003226:	d035      	beq.n	8003294 <main+0x1bc>
 8003228:	2b4f      	cmp	r3, #79	; 0x4f
 800322a:	d116      	bne.n	800325a <main+0x182>
	   			  SN_WriteDataPins(0x06);
 800322c:	2006      	movs	r0, #6
 800322e:	f7ff fded 	bl	8002e0c <SN_WriteDataPins>
	   			  SN_WriteDataPins(song[pos++]);
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	f81b 0003 	ldrb.w	r0, [fp, r3]
 800323a:	6022      	str	r2, [r4, #0]
	   			  SN_WriteDataPins(song[pos++]);
 800323c:	f7ff fde6 	bl	8002e0c <SN_WriteDataPins>
	   			  pauseTime = singleSampleWait;
 8003240:	4b3f      	ldr	r3, [pc, #252]	; (8003340 <main+0x268>)
 8003242:	edd3 7a00 	vldr	s15, [r3]
 8003246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800324a:	edc5 7a00 	vstr	s15, [r5]
	   			  break;
 800324e:	e004      	b.n	800325a <main+0x182>
	   		  switch(cmd)
 8003250:	2b66      	cmp	r3, #102	; 0x66
 8003252:	d04c      	beq.n	80032ee <main+0x216>
 8003254:	d813      	bhi.n	800327e <main+0x1a6>
 8003256:	2b63      	cmp	r3, #99	; 0x63
 8003258:	d046      	beq.n	80032e8 <main+0x210>
	   	  Delay(pauseTime);
 800325a:	f8d5 b000 	ldr.w	fp, [r5]
	uint32_t start = DWT->CYCCNT;
 800325e:	4d39      	ldr	r5, [pc, #228]	; (8003344 <main+0x26c>)
 8003260:	686a      	ldr	r2, [r5, #4]
 8003262:	9201      	str	r2, [sp, #4]
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8003264:	f7fe fa9a 	bl	800179c <HAL_RCC_GetHCLKFreq>
 8003268:	9a01      	ldr	r2, [sp, #4]
 800326a:	4b37      	ldr	r3, [pc, #220]	; (8003348 <main+0x270>)
 800326c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003270:	fb0b fb00 	mul.w	fp, fp, r0
	while ((DWT->CYCCNT - start) < micros);
 8003274:	686b      	ldr	r3, [r5, #4]
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	455b      	cmp	r3, fp
 800327a:	d3fb      	bcc.n	8003274 <main+0x19c>
 800327c:	e7c3      	b.n	8003206 <main+0x12e>
	   		  switch(cmd)
 800327e:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
 8003282:	2a0f      	cmp	r2, #15
 8003284:	d8e9      	bhi.n	800325a <main+0x182>
	   		      uint32_t wait = cmd & 0x0F;
 8003286:	f003 030f 	and.w	r3, r3, #15
	   		      pauseTime = preCalced7nDelays[wait];
 800328a:	4a30      	ldr	r2, [pc, #192]	; (800334c <main+0x274>)
 800328c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003290:	602b      	str	r3, [r5, #0]
	   		    break;
 8003292:	e7e2      	b.n	800325a <main+0x182>
	   		        wait += ( song[pos++]  << ( 8 * i ));
 8003294:	f81b 3001 	ldrb.w	r3, [fp, r1]
	   		      pauseTime = ((1000.0 / (sampleRate/(float)wait))*1000);
 8003298:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003350 <main+0x278>
	   		        wait += ( song[pos++]  << ( 8 * i ));
 800329c:	1cd1      	adds	r1, r2, #3
 800329e:	445a      	add	r2, fp
 80032a0:	6021      	str	r1, [r4, #0]
 80032a2:	7892      	ldrb	r2, [r2, #2]
 80032a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	   		      pauseTime = ((1000.0 / (sampleRate/(float)wait))*1000);
 80032a8:	ee07 3a90 	vmov	s15, r3
 80032ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032b4:	ee16 0a90 	vmov	r0, s13
 80032b8:	f7fd f8f0 	bl	800049c <__aeabi_f2d>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4630      	mov	r0, r6
 80032c2:	4639      	mov	r1, r7
 80032c4:	f7fd fa68 	bl	8000798 <__aeabi_ddiv>
 80032c8:	4632      	mov	r2, r6
 80032ca:	463b      	mov	r3, r7
 80032cc:	f7fd f93a 	bl	8000544 <__aeabi_dmul>
 80032d0:	f7fd fb4a 	bl	8000968 <__aeabi_d2uiz>
 80032d4:	6028      	str	r0, [r5, #0]
	   			  break;
 80032d6:	e7c0      	b.n	800325a <main+0x182>
	   			  SN_WriteDataPins(song[pos++]);
 80032d8:	3202      	adds	r2, #2
 80032da:	6022      	str	r2, [r4, #0]
 80032dc:	f81b 0001 	ldrb.w	r0, [fp, r1]
 80032e0:	e7ac      	b.n	800323c <main+0x164>
	   			  pauseTime = WAIT60TH;
 80032e2:	edd8 7a00 	vldr	s15, [r8]
 80032e6:	e7ae      	b.n	8003246 <main+0x16e>
	   			  pauseTime = WAIT50TH;
 80032e8:	edd9 7a00 	vldr	s15, [r9]
 80032ec:	e7ab      	b.n	8003246 <main+0x16e>
	   			  if(loopOffset == 0)
 80032ee:	f8da 3000 	ldr.w	r3, [sl]
 80032f2:	b913      	cbnz	r3, 80032fa <main+0x222>
	   				loopOffset = 0x40;
 80032f4:	2340      	movs	r3, #64	; 0x40
 80032f6:	f8ca 3000 	str.w	r3, [sl]
	   			  pos = loopOffset;
 80032fa:	f8da 3000 	ldr.w	r3, [sl]
 80032fe:	6023      	str	r3, [r4, #0]
	   			  break;
 8003300:	e7ab      	b.n	800325a <main+0x182>
 8003302:	bf00      	nop
 8003304:	2000481c 	.word	0x2000481c
 8003308:	46823555 	.word	0x46823555
 800330c:	20004818 	.word	0x20004818
 8003310:	469c4000 	.word	0x469c4000
 8003314:	40021000 	.word	0x40021000
 8003318:	48000800 	.word	0x48000800
 800331c:	10210000 	.word	0x10210000
 8003320:	20004de4 	.word	0x20004de4
 8003324:	40004400 	.word	0x40004400
 8003328:	20004ce0 	.word	0x20004ce0
 800332c:	40012800 	.word	0x40012800
 8003330:	20004834 	.word	0x20004834
 8003334:	408f4000 	.word	0x408f4000
 8003338:	20004824 	.word	0x20004824
 800333c:	20004830 	.word	0x20004830
 8003340:	20004838 	.word	0x20004838
 8003344:	e0001000 	.word	0xe0001000
 8003348:	000f4240 	.word	0x000f4240
 800334c:	20004d64 	.word	0x20004d64
 8003350:	472c4400 	.word	0x472c4400
 8003354:	2000482c 	.word	0x2000482c
 8003358:	20000000 	.word	0x20000000

0800335c <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 800335c:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 800335e:	4c06      	ldr	r4, [pc, #24]	; (8003378 <SD_CheckStatus.isra.0+0x1c>)
 8003360:	2301      	movs	r3, #1
 8003362:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003364:	f7ff fdc0 	bl	8002ee8 <BSP_SD_GetCardState>
 8003368:	4623      	mov	r3, r4
 800336a:	b918      	cbnz	r0, 8003374 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 800336c:	7822      	ldrb	r2, [r4, #0]
 800336e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003372:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8003374:	7818      	ldrb	r0, [r3, #0]
}
 8003376:	bd10      	pop	{r4, pc}
 8003378:	200047ea 	.word	0x200047ea

0800337c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800337c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800337e:	4c05      	ldr	r4, [pc, #20]	; (8003394 <SD_initialize+0x18>)
 8003380:	2301      	movs	r3, #1
 8003382:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003384:	f7ff fd82 	bl	8002e8c <BSP_SD_Init>
 8003388:	b910      	cbnz	r0, 8003390 <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 800338a:	f7ff ffe7 	bl	800335c <SD_CheckStatus.isra.0>
 800338e:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8003390:	7820      	ldrb	r0, [r4, #0]
}
 8003392:	bd10      	pop	{r4, pc}
 8003394:	200047ea 	.word	0x200047ea

08003398 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8003398:	f7ff bfe0 	b.w	800335c <SD_CheckStatus.isra.0>

0800339c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800339c:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  ReadStatus = 0;
 800339e:	4c16      	ldr	r4, [pc, #88]	; (80033f8 <SD_read+0x5c>)
{
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
  ReadStatus = 0;
 80033a4:	2200      	movs	r2, #0
 80033a6:	6022      	str	r2, [r4, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80033a8:	461a      	mov	r2, r3
 80033aa:	f7ff fd81 	bl	8002eb0 <BSP_SD_ReadBlocks_DMA>
 80033ae:	b108      	cbz	r0, 80033b4 <SD_read+0x18>
  DRESULT res = RES_ERROR;
 80033b0:	2001      	movs	r0, #1
 80033b2:	bd70      	pop	{r4, r5, r6, pc}
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 80033b4:	f000 f9b4 	bl	8003720 <HAL_GetTick>
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80033b8:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 80033bc:	4606      	mov	r6, r0
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	b19b      	cbz	r3, 80033ea <SD_read+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f3      	beq.n	80033b0 <SD_read+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      ReadStatus = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 80033cc:	f000 f9a8 	bl	8003720 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80033d0:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 80033d4:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80033d6:	f000 f9a3 	bl	8003720 <HAL_GetTick>
 80033da:	1b40      	subs	r0, r0, r5
 80033dc:	42a0      	cmp	r0, r4
 80033de:	d8e7      	bhi.n	80033b0 <SD_read+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80033e0:	f7ff fd82 	bl	8002ee8 <BSP_SD_GetCardState>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	d1f6      	bne.n	80033d6 <SD_read+0x3a>
      }
    }
  }

  return res;
}
 80033e8:	bd70      	pop	{r4, r5, r6, pc}
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80033ea:	f000 f999 	bl	8003720 <HAL_GetTick>
 80033ee:	1b80      	subs	r0, r0, r6
 80033f0:	42a8      	cmp	r0, r5
 80033f2:	d9e4      	bls.n	80033be <SD_read+0x22>
 80033f4:	e7e5      	b.n	80033c2 <SD_read+0x26>
 80033f6:	bf00      	nop
 80033f8:	20004844 	.word	0x20004844

080033fc <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80033fc:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  WriteStatus = 0;
 80033fe:	4c16      	ldr	r4, [pc, #88]	; (8003458 <SD_write+0x5c>)
{
 8003400:	4608      	mov	r0, r1
 8003402:	4611      	mov	r1, r2
  WriteStatus = 0;
 8003404:	2200      	movs	r2, #0
 8003406:	6022      	str	r2, [r4, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8003408:	461a      	mov	r2, r3
 800340a:	f7ff fd5f 	bl	8002ecc <BSP_SD_WriteBlocks_DMA>
 800340e:	b108      	cbz	r0, 8003414 <SD_write+0x18>
  DRESULT res = RES_ERROR;
 8003410:	2001      	movs	r0, #1
 8003412:	bd70      	pop	{r4, r5, r6, pc}
                            (uint32_t) (sector),
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */

    timeout = HAL_GetTick();
 8003414:	f000 f984 	bl	8003720 <HAL_GetTick>
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8003418:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 800341c:	4606      	mov	r6, r0
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	b19b      	cbz	r3, 800344a <SD_write+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f3      	beq.n	8003410 <SD_write+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      WriteStatus = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 800342c:	f000 f978 	bl	8003720 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8003430:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 8003434:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8003436:	f000 f973 	bl	8003720 <HAL_GetTick>
 800343a:	1b40      	subs	r0, r0, r5
 800343c:	42a0      	cmp	r0, r4
 800343e:	d8e7      	bhi.n	8003410 <SD_write+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8003440:	f7ff fd52 	bl	8002ee8 <BSP_SD_GetCardState>
 8003444:	2800      	cmp	r0, #0
 8003446:	d1f6      	bne.n	8003436 <SD_write+0x3a>
      }
    }
  }

  return res;
}
 8003448:	bd70      	pop	{r4, r5, r6, pc}
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800344a:	f000 f969 	bl	8003720 <HAL_GetTick>
 800344e:	1b80      	subs	r0, r0, r6
 8003450:	42a8      	cmp	r0, r5
 8003452:	d9e4      	bls.n	800341e <SD_write+0x22>
 8003454:	e7e5      	b.n	8003422 <SD_write+0x26>
 8003456:	bf00      	nop
 8003458:	20004848 	.word	0x20004848

0800345c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800345c:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800345e:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <SD_ioctl+0x4c>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	07db      	lsls	r3, r3, #31
{
 8003464:	b088      	sub	sp, #32
 8003466:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003468:	d41b      	bmi.n	80034a2 <SD_ioctl+0x46>

  switch (cmd)
 800346a:	2903      	cmp	r1, #3
 800346c:	d803      	bhi.n	8003476 <SD_ioctl+0x1a>
 800346e:	e8df f001 	tbb	[pc, r1]
 8003472:	0510      	.short	0x0510
 8003474:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8003476:	2004      	movs	r0, #4
  }

  return res;
}
 8003478:	b008      	add	sp, #32
 800347a:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800347c:	4668      	mov	r0, sp
 800347e:	f7ff fd3d 	bl	8002efc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003482:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003484:	6023      	str	r3, [r4, #0]
 8003486:	e004      	b.n	8003492 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8003488:	4668      	mov	r0, sp
 800348a:	f7ff fd37 	bl	8002efc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800348e:	9b07      	ldr	r3, [sp, #28]
 8003490:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8003492:	2000      	movs	r0, #0
 8003494:	e7f0      	b.n	8003478 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8003496:	4668      	mov	r0, sp
 8003498:	f7ff fd30 	bl	8002efc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800349c:	9b07      	ldr	r3, [sp, #28]
 800349e:	0a5b      	lsrs	r3, r3, #9
 80034a0:	e7f0      	b.n	8003484 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80034a2:	2003      	movs	r0, #3
 80034a4:	e7e8      	b.n	8003478 <SD_ioctl+0x1c>
 80034a6:	bf00      	nop
 80034a8:	200047ea 	.word	0x200047ea

080034ac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ac:	4b21      	ldr	r3, [pc, #132]	; (8003534 <HAL_MspInit+0x88>)
{
 80034ae:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	661a      	str	r2, [r3, #96]	; 0x60
 80034b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034ba:	f002 0201 	and.w	r2, r2, #1
 80034be:	9200      	str	r2, [sp, #0]
 80034c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034c8:	659a      	str	r2, [r3, #88]	; 0x58
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d0:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034d2:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80034d4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034d6:	f7fd fc15 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80034da:	2200      	movs	r2, #0
 80034dc:	4611      	mov	r1, r2
 80034de:	f06f 000b 	mvn.w	r0, #11
 80034e2:	f7fd fc21 	bl	8000d28 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80034e6:	2200      	movs	r2, #0
 80034e8:	4611      	mov	r1, r2
 80034ea:	f06f 000a 	mvn.w	r0, #10
 80034ee:	f7fd fc1b 	bl	8000d28 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80034f2:	2200      	movs	r2, #0
 80034f4:	4611      	mov	r1, r2
 80034f6:	f06f 0009 	mvn.w	r0, #9
 80034fa:	f7fd fc15 	bl	8000d28 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	4611      	mov	r1, r2
 8003502:	f06f 0004 	mvn.w	r0, #4
 8003506:	f7fd fc0f 	bl	8000d28 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800350a:	2200      	movs	r2, #0
 800350c:	4611      	mov	r1, r2
 800350e:	f06f 0003 	mvn.w	r0, #3
 8003512:	f7fd fc09 	bl	8000d28 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003516:	2200      	movs	r2, #0
 8003518:	4611      	mov	r1, r2
 800351a:	f06f 0001 	mvn.w	r0, #1
 800351e:	f7fd fc03 	bl	8000d28 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003522:	2200      	movs	r2, #0
 8003524:	4611      	mov	r1, r2
 8003526:	f04f 30ff 	mov.w	r0, #4294967295
 800352a:	f7fd fbfd 	bl	8000d28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800352e:	b003      	add	sp, #12
 8003530:	f85d fb04 	ldr.w	pc, [sp], #4
 8003534:	40021000 	.word	0x40021000

08003538 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003538:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 800353a:	6802      	ldr	r2, [r0, #0]
 800353c:	4b15      	ldr	r3, [pc, #84]	; (8003594 <HAL_SD_MspInit+0x5c>)
 800353e:	429a      	cmp	r2, r3
{
 8003540:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 8003542:	d124      	bne.n	800358e <HAL_SD_MspInit+0x56>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003544:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800354a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800354c:	4812      	ldr	r0, [pc, #72]	; (8003598 <HAL_SD_MspInit+0x60>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800354e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003552:	661a      	str	r2, [r3, #96]	; 0x60
 8003554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003556:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003562:	f44f 5388 	mov.w	r3, #4352	; 0x1100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003566:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003568:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800356a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800356c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356e:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003570:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003572:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003574:	f7fd fc74 	bl	8000e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003578:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800357a:	eb0d 0103 	add.w	r1, sp, r3
 800357e:	4807      	ldr	r0, [pc, #28]	; (800359c <HAL_SD_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003580:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003582:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003584:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003586:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003588:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800358a:	f7fd fc69 	bl	8000e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800358e:	b007      	add	sp, #28
 8003590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003592:	bf00      	nop
 8003594:	40012800 	.word	0x40012800
 8003598:	48000800 	.word	0x48000800
 800359c:	48000c00 	.word	0x48000c00

080035a0 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80035a2:	6802      	ldr	r2, [r0, #0]
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <HAL_UART_MspInit+0x44>)
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d119      	bne.n	80035de <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035aa:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ae:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80035b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80035b6:	659a      	str	r2, [r3, #88]	; 0x58
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80035c2:	230c      	movs	r3, #12
 80035c4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c6:	2302      	movs	r3, #2
 80035c8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ce:	2303      	movs	r3, #3
 80035d0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035d6:	2307      	movs	r3, #7
 80035d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035da:	f7fd fc41 	bl	8000e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035de:	b007      	add	sp, #28
 80035e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80035e4:	40004400 	.word	0x40004400

080035e8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80035e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035ea:	f000 f849 	bl	8003680 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80035f2:	f7fd bbf0 	b.w	8000dd6 <HAL_SYSTICK_IRQHandler>
	...

080035f8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035f8:	490f      	ldr	r1, [pc, #60]	; (8003638 <SystemInit+0x40>)
 80035fa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80035fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003606:	4b0d      	ldr	r3, [pc, #52]	; (800363c <SystemInit+0x44>)
 8003608:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800360a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003612:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800361a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800361e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003620:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003624:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800362c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800362e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003630:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003634:	608b      	str	r3, [r1, #8]
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00
 800363c:	40021000 	.word	0x40021000

08003640 <TM_DELAY_Init>:
uint32_t TM_DELAY_Init(void) {
#if !defined(STM32F0xx)
	uint32_t c;
	
    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <TM_DELAY_Init+0x34>)
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003648:	60da      	str	r2, [r3, #12]
    CoreDebug->DEMCR |=  0x01000000;
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003650:	60da      	str	r2, [r3, #12]
	
    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <TM_DELAY_Init+0x38>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]
    DWT->CTRL |=  0x00000001;
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]
	
    /* Reset counter */
    DWT->CYCCNT = 0;
 8003664:	2200      	movs	r2, #0
 8003666:	605a      	str	r2, [r3, #4]
	
	/* Check if DWT has started */
	c = DWT->CYCCNT;
 8003668:	685a      	ldr	r2, [r3, #4]
	
	/* 2 dummys */
	__ASM volatile ("NOP");
 800366a:	bf00      	nop
	__ASM volatile ("NOP");
 800366c:	bf00      	nop
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 800366e:	6858      	ldr	r0, [r3, #4]
#else
	/* Return OK */
	return 1;
#endif
}
 8003670:	1a80      	subs	r0, r0, r2
 8003672:	4770      	bx	lr
 8003674:	e000edf0 	.word	0xe000edf0
 8003678:	e0001000 	.word	0xe0001000

0800367c <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 800367c:	4770      	bx	lr
	...

08003680 <HAL_IncTick>:
/* Called from Systick handler */
void HAL_IncTick(void) {
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 8003680:	4a18      	ldr	r2, [pc, #96]	; (80036e4 <HAL_IncTick+0x64>)
void HAL_IncTick(void) {
 8003682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TM_Time++;
 8003684:	6813      	ldr	r3, [r2, #0]
 8003686:	3301      	adds	r3, #1
 8003688:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 800368a:	4b17      	ldr	r3, [pc, #92]	; (80036e8 <HAL_IncTick+0x68>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	b112      	cbz	r2, 8003696 <HAL_IncTick+0x16>
		TM_Time2--;
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	3a01      	subs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8003696:	4e15      	ldr	r6, [pc, #84]	; (80036ec <HAL_IncTick+0x6c>)
void HAL_IncTick(void) {
 8003698:	2500      	movs	r5, #0
 800369a:	4637      	mov	r7, r6
	for (i = 0; i < CustomTimers.Count; i++) {
 800369c:	7833      	ldrb	r3, [r6, #0]
 800369e:	b2ec      	uxtb	r4, r5
 80036a0:	42a3      	cmp	r3, r4
 80036a2:	d802      	bhi.n	80036aa <HAL_IncTick+0x2a>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 80036a4:	f7ff ffea 	bl	800367c <TM_DELAY_1msHandler>
 80036a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 80036aa:	00a4      	lsls	r4, r4, #2
 80036ac:	1933      	adds	r3, r6, r4
 80036ae:	6858      	ldr	r0, [r3, #4]
		if (
 80036b0:	b1b0      	cbz	r0, 80036e0 <HAL_IncTick+0x60>
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 80036b2:	7803      	ldrb	r3, [r0, #0]
 80036b4:	079b      	lsls	r3, r3, #30
 80036b6:	d513      	bpl.n	80036e0 <HAL_IncTick+0x60>
			if (CustomTimers.Timers[i]->CNT) {
 80036b8:	6883      	ldr	r3, [r0, #8]
 80036ba:	b10b      	cbz	r3, 80036c0 <HAL_IncTick+0x40>
				CustomTimers.Timers[i]->CNT--;
 80036bc:	3b01      	subs	r3, #1
 80036be:	6083      	str	r3, [r0, #8]
			if (CustomTimers.Timers[i]->CNT == 0) {
 80036c0:	6883      	ldr	r3, [r0, #8]
 80036c2:	b96b      	cbnz	r3, 80036e0 <HAL_IncTick+0x60>
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 80036c4:	443c      	add	r4, r7
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 80036c6:	68c3      	ldr	r3, [r0, #12]
 80036c8:	6901      	ldr	r1, [r0, #16]
 80036ca:	4798      	blx	r3
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 80036cc:	6862      	ldr	r2, [r4, #4]
 80036ce:	6853      	ldr	r3, [r2, #4]
 80036d0:	6093      	str	r3, [r2, #8]
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 80036d2:	7813      	ldrb	r3, [r2, #0]
 80036d4:	f013 0101 	ands.w	r1, r3, #1
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 80036d8:	bf04      	itt	eq
 80036da:	f361 0341 	bfieq	r3, r1, #1, #1
 80036de:	7013      	strbeq	r3, [r2, #0]
 80036e0:	3501      	adds	r5, #1
 80036e2:	e7db      	b.n	800369c <HAL_IncTick+0x1c>
 80036e4:	20004864 	.word	0x20004864
 80036e8:	20004868 	.word	0x20004868
 80036ec:	2000484c 	.word	0x2000484c

080036f0 <HAL_Delay>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036f0:	f3ef 8305 	mrs	r3, IPSR
}

void HAL_Delay(uint32_t Delay) {
	/* Delay for amount of milliseconds */
	/* Check if we are called from ISR */
	if (__get_IPSR() == 0) {
 80036f4:	b113      	cbz	r3, 80036fc <HAL_Delay+0xc>
		}
	} else {
		/* Called from interrupt mode */
		while (Delay) {
			/* Check if timer reached zero after we last checked COUNTFLAG bit */
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 80036f6:	4b08      	ldr	r3, [pc, #32]	; (8003718 <HAL_Delay+0x28>)
		while (Delay) {
 80036f8:	b938      	cbnz	r0, 800370a <HAL_Delay+0x1a>
 80036fa:	4770      	bx	lr
	}
}

uint32_t HAL_GetTick(void) {
	/* Return current time in milliseconds */
	return TM_Time;
 80036fc:	4b07      	ldr	r3, [pc, #28]	; (800371c <HAL_Delay+0x2c>)
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
		while ((HAL_GetTick() - tickstart) < Delay) {
 8003702:	1a52      	subs	r2, r2, r1
 8003704:	4290      	cmp	r0, r2
 8003706:	d8fb      	bhi.n	8003700 <HAL_Delay+0x10>
 8003708:	4770      	bx	lr
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	03d2      	lsls	r2, r2, #15
				Delay--;
 800370e:	bf48      	it	mi
 8003710:	f100 30ff 	addmi.w	r0, r0, #4294967295
 8003714:	e7f0      	b.n	80036f8 <HAL_Delay+0x8>
 8003716:	bf00      	nop
 8003718:	e000e010 	.word	0xe000e010
 800371c:	20004864 	.word	0x20004864

08003720 <HAL_GetTick>:
	return TM_Time;
 8003720:	4b01      	ldr	r3, [pc, #4]	; (8003728 <HAL_GetTick+0x8>)
 8003722:	6818      	ldr	r0, [r3, #0]
}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20004864 	.word	0x20004864

0800372c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800372c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003764 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003730:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003732:	e003      	b.n	800373c <LoopCopyDataInit>

08003734 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003736:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003738:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800373a:	3104      	adds	r1, #4

0800373c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800373c:	480b      	ldr	r0, [pc, #44]	; (800376c <LoopForever+0xa>)
	ldr	r3, =_edata
 800373e:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003740:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003742:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003744:	d3f6      	bcc.n	8003734 <CopyDataInit>
	ldr	r2, =_sbss
 8003746:	4a0b      	ldr	r2, [pc, #44]	; (8003774 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003748:	e002      	b.n	8003750 <LoopFillZerobss>

0800374a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800374a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800374c:	f842 3b04 	str.w	r3, [r2], #4

08003750 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003750:	4b09      	ldr	r3, [pc, #36]	; (8003778 <LoopForever+0x16>)
	cmp	r2, r3
 8003752:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003754:	d3f9      	bcc.n	800374a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003756:	f7ff ff4f 	bl	80035f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800375a:	f000 f811 	bl	8003780 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800375e:	f7ff fcbb 	bl	80030d8 <main>

08003762 <LoopForever>:

LoopForever:
    b LoopForever
 8003762:	e7fe      	b.n	8003762 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003764:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8003768:	08003860 	.word	0x08003860
	ldr	r0, =_sdata
 800376c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003770:	200047f0 	.word	0x200047f0
	ldr	r2, =_sbss
 8003774:	200047f0 	.word	0x200047f0
	ldr	r3, = _ebss
 8003778:	20004e5c 	.word	0x20004e5c

0800377c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800377c:	e7fe      	b.n	800377c <ADC1_IRQHandler>
	...

08003780 <__libc_init_array>:
 8003780:	b570      	push	{r4, r5, r6, lr}
 8003782:	4e0d      	ldr	r6, [pc, #52]	; (80037b8 <__libc_init_array+0x38>)
 8003784:	4c0d      	ldr	r4, [pc, #52]	; (80037bc <__libc_init_array+0x3c>)
 8003786:	1ba4      	subs	r4, r4, r6
 8003788:	10a4      	asrs	r4, r4, #2
 800378a:	2500      	movs	r5, #0
 800378c:	42a5      	cmp	r5, r4
 800378e:	d109      	bne.n	80037a4 <__libc_init_array+0x24>
 8003790:	4e0b      	ldr	r6, [pc, #44]	; (80037c0 <__libc_init_array+0x40>)
 8003792:	4c0c      	ldr	r4, [pc, #48]	; (80037c4 <__libc_init_array+0x44>)
 8003794:	f000 f818 	bl	80037c8 <_init>
 8003798:	1ba4      	subs	r4, r4, r6
 800379a:	10a4      	asrs	r4, r4, #2
 800379c:	2500      	movs	r5, #0
 800379e:	42a5      	cmp	r5, r4
 80037a0:	d105      	bne.n	80037ae <__libc_init_array+0x2e>
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037a8:	4798      	blx	r3
 80037aa:	3501      	adds	r5, #1
 80037ac:	e7ee      	b.n	800378c <__libc_init_array+0xc>
 80037ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037b2:	4798      	blx	r3
 80037b4:	3501      	adds	r5, #1
 80037b6:	e7f2      	b.n	800379e <__libc_init_array+0x1e>
 80037b8:	08003858 	.word	0x08003858
 80037bc:	08003858 	.word	0x08003858
 80037c0:	08003858 	.word	0x08003858
 80037c4:	0800385c 	.word	0x0800385c

080037c8 <_init>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	bf00      	nop
 80037cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ce:	bc08      	pop	{r3}
 80037d0:	469e      	mov	lr, r3
 80037d2:	4770      	bx	lr

080037d4 <_fini>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	bf00      	nop
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr
